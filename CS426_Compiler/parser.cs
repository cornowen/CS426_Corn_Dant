/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using comp5210.node;
using comp5210.lexer;
using comp5210.analysis;

namespace comp5210.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTClass(TClass node)
    {
        index = 0;
    }

    public override void CaseTPublic(TPublic node)
    {
        index = 1;
    }

    public override void CaseTPrivate(TPrivate node)
    {
        index = 2;
    }

    public override void CaseTReturn(TReturn node)
    {
        index = 3;
    }

    public override void CaseTStatic(TStatic node)
    {
        index = 4;
    }

    public override void CaseTVoid(TVoid node)
    {
        index = 5;
    }

    public override void CaseTMain(TMain node)
    {
        index = 6;
    }

    public override void CaseTSemicolon(TSemicolon node)
    {
        index = 7;
    }

    public override void CaseTComma(TComma node)
    {
        index = 8;
    }

    public override void CaseTIf(TIf node)
    {
        index = 9;
    }

    public override void CaseTElse(TElse node)
    {
        index = 10;
    }

    public override void CaseTWhile(TWhile node)
    {
        index = 11;
    }

    public override void CaseTInt(TInt node)
    {
        index = 12;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 13;
    }

    public override void CaseTString(TString node)
    {
        index = 14;
    }

    public override void CaseTVariable(TVariable node)
    {
        index = 15;
    }

    public override void CaseTConstant(TConstant node)
    {
        index = 16;
    }

    public override void CaseTInit(TInit node)
    {
        index = 17;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 18;
    }

    public override void CaseTMinus(TMinus node)
    {
        index = 19;
    }

    public override void CaseTMultiply(TMultiply node)
    {
        index = 20;
    }

    public override void CaseTDivide(TDivide node)
    {
        index = 21;
    }

    public override void CaseTLeftParenthesis(TLeftParenthesis node)
    {
        index = 22;
    }

    public override void CaseTRightParenthesis(TRightParenthesis node)
    {
        index = 23;
    }

    public override void CaseTLeftBracket(TLeftBracket node)
    {
        index = 24;
    }

    public override void CaseTRightBracket(TRightBracket node)
    {
        index = 25;
    }

    public override void CaseTLeftCurlyBrace(TLeftCurlyBrace node)
    {
        index = 26;
    }

    public override void CaseTRightCurlyBrace(TRightCurlyBrace node)
    {
        index = 27;
    }

    public override void CaseTAnd(TAnd node)
    {
        index = 28;
    }

    public override void CaseTOr(TOr node)
    {
        index = 29;
    }

    public override void CaseTNot(TNot node)
    {
        index = 30;
    }

    public override void CaseTLessThan(TLessThan node)
    {
        index = 31;
    }

    public override void CaseTGreaterThan(TGreaterThan node)
    {
        index = 32;
    }

    public override void CaseTLessThanEqual(TLessThanEqual node)
    {
        index = 33;
    }

    public override void CaseTGreaterThanEqual(TGreaterThanEqual node)
    {
        index = 34;
    }

    public override void CaseTEquivalance(TEquivalance node)
    {
        index = 35;
    }

    public override void CaseTEqual(TEqual node)
    {
        index = 36;
    }

    public override void CaseTNotEqual(TNotEqual node)
    {
        index = 37;
    }

    public override void CaseEOF(EOF node)
    {
        index = 38;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(2), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(3), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(4), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(4), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(5), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(5), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(5), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(5), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(5), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(5), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(5), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(6), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(6), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(6), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(7), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(7), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(7), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(7), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(7), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(7), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(7), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(7), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(8), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(8), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(8), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(9), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(9), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(9), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(10), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(10), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(10), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(10), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(10), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(11), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(11), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(11), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(11), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(11), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(11), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(12), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(13), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(13), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(13), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(13), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(14), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(14), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(15), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(15), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(16), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(17), list);
        }
        break;
                    case 54:
        {
      ArrayList list = New54();
      Push(GoTo(17), list);
        }
        break;
                    case 55:
        {
      ArrayList list = New55();
      Push(GoTo(18), list);
        }
        break;
                    case 56:
        {
      ArrayList list = New56();
      Push(GoTo(18), list);
        }
        break;
                    case 57:
        {
      ArrayList list = New57();
      Push(GoTo(18), list);
        }
        break;
                    case 58:
        {
      ArrayList list = New58();
      Push(GoTo(18), list);
        }
        break;
                    case 59:
        {
      ArrayList list = New59();
      Push(GoTo(19), list);
        }
        break;
                    case 60:
        {
      ArrayList list = New60();
      Push(GoTo(19), list);
        }
        break;
                    case 61:
        {
      ArrayList list = New61();
      Push(GoTo(20), list);
        }
        break;
                    case 62:
        {
      ArrayList list = New62();
      Push(GoTo(21), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstants pconstantsNode2 = (PConstants)nodeArrayList1[0];
        PMethod pmethodNode3 = (PMethod)nodeArrayList2[0];
        PMainMethod pmainmethodNode4 = (PMainMethod)nodeArrayList3[0];
        AProgram pprogramNode1 = new AProgram (
              pconstantsNode2,
              pmethodNode3,
              pmainmethodNode4
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMain tmainNode2 = (TMain)nodeArrayList1[0];
        TLeftParenthesis tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2[0];
        TRightParenthesis trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3[0];
        TLeftCurlyBrace tleftcurlybraceNode5 = (TLeftCurlyBrace)nodeArrayList4[0];
        PList plistNode6 = (PList)nodeArrayList5[0];
        TRightCurlyBrace trightcurlybraceNode7 = (TRightCurlyBrace)nodeArrayList6[0];
        AMainMethod pmainmethodNode1 = new AMainMethod (
              tmainNode2,
              tleftparenthesisNode3,
              trightparenthesisNode4,
              tleftcurlybraceNode5,
              plistNode6,
              trightcurlybraceNode7
        );
        nodeList.Add(pmainmethodNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMethod pmethodNode2 = (PMethod)nodeArrayList1[0];
        PMethodDeclare pmethoddeclareNode3 = (PMethodDeclare)nodeArrayList2[0];
        AMethodRecurseMethod pmethodNode1 = new AMethodRecurseMethod (
              pmethodNode2,
              pmethoddeclareNode3
        );
        nodeList.Add(pmethodNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ANothingMethod pmethodNode1 = new ANothingMethod (
        );
        nodeList.Add(pmethodNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TConstant tconstantNode2 = (TConstant)nodeArrayList1[0];
        PConstants pconstantsNode3 = (PConstants)nodeArrayList2[0];
        PE1 pe1Node4 = (PE1)nodeArrayList3[0];
        PE1 pe1Node5 = (PE1)nodeArrayList4[0];
        PInitialization pinitializationNode6 = (PInitialization)nodeArrayList5[0];
        TSemicolon tsemicolonNode7 = (TSemicolon)nodeArrayList6[0];
        AConstantinitConstants pconstantsNode1 = new AConstantinitConstants (
              tconstantNode2,
              pconstantsNode3,
              pe1Node4,
              pe1Node5,
              pinitializationNode6,
              tsemicolonNode7
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ANothingConstants pconstantsNode1 = new ANothingConstants (
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInit tinitNode2 = (TInit)nodeArrayList1[0];
        TInt tintNode3 = (TInt)nodeArrayList2[0];
        AIntizationInitialization pinitializationNode1 = new AIntizationInitialization (
              tinitNode2,
              tintNode3
        );
        nodeList.Add(pinitializationNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInit tinitNode2 = (TInit)nodeArrayList1[0];
        TFloat tfloatNode3 = (TFloat)nodeArrayList2[0];
        AFloatizationInitialization pinitializationNode1 = new AFloatizationInitialization (
              tinitNode2,
              tfloatNode3
        );
        nodeList.Add(pinitializationNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PVardecl pvardeclNode2 = (PVardecl)nodeArrayList1[0];
        PList plistNode3 = (PList)nodeArrayList2[0];
        AFirstList plistNode1 = new AFirstList (
              pvardeclNode2,
              plistNode3
        );
        nodeList.Add(plistNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PVarassign pvarassignNode2 = (PVarassign)nodeArrayList1[0];
        PList plistNode3 = (PList)nodeArrayList2[0];
        ASecondList plistNode1 = new ASecondList (
              pvarassignNode2,
              plistNode3
        );
        nodeList.Add(plistNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMethodCall pmethodcallNode2 = (PMethodCall)nodeArrayList1[0];
        PList plistNode3 = (PList)nodeArrayList2[0];
        AThirdList plistNode1 = new AThirdList (
              pmethodcallNode2,
              plistNode3
        );
        nodeList.Add(plistNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfStatement pifstatementNode2 = (PIfStatement)nodeArrayList1[0];
        PList plistNode3 = (PList)nodeArrayList2[0];
        AFourthList plistNode1 = new AFourthList (
              pifstatementNode2,
              plistNode3
        );
        nodeList.Add(plistNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhileStatement pwhilestatementNode2 = (PWhileStatement)nodeArrayList1[0];
        PList plistNode3 = (PList)nodeArrayList2[0];
        AWhileList plistNode1 = new AWhileList (
              pwhilestatementNode2,
              plistNode3
        );
        nodeList.Add(plistNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PArrayCreate parraycreateNode2 = (PArrayCreate)nodeArrayList1[0];
        PList plistNode3 = (PList)nodeArrayList2[0];
        AArrayList plistNode1 = new AArrayList (
              parraycreateNode2,
              plistNode3
        );
        nodeList.Add(plistNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ANothingList plistNode1 = new ANothingList (
        );
        nodeList.Add(plistNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE2 pe2Node2 = (PE2)nodeArrayList1[0];
        TAnd tandNode3 = (TAnd)nodeArrayList2[0];
        PE2 pe2Node4 = (PE2)nodeArrayList3[0];
        ASide1E1 pe1Node1 = new ASide1E1 (
              pe2Node2,
              tandNode3,
              pe2Node4
        );
        nodeList.Add(pe1Node1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE2 pe2Node2 = (PE2)nodeArrayList1[0];
        TOr torNode3 = (TOr)nodeArrayList2[0];
        PE2 pe2Node4 = (PE2)nodeArrayList3[0];
        ASide2E1 pe1Node1 = new ASide2E1 (
              pe2Node2,
              torNode3,
              pe2Node4
        );
        nodeList.Add(pe1Node1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE2 pe2Node2 = (PE2)nodeArrayList1[0];
        ASide3E1 pe1Node1 = new ASide3E1 (
              pe2Node2
        );
        nodeList.Add(pe1Node1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE3 pe3Node2 = (PE3)nodeArrayList1[0];
        TLessThan tlessthanNode3 = (TLessThan)nodeArrayList2[0];
        PE3 pe3Node4 = (PE3)nodeArrayList3[0];
        ASide1E2 pe2Node1 = new ASide1E2 (
              pe3Node2,
              tlessthanNode3,
              pe3Node4
        );
        nodeList.Add(pe2Node1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE3 pe3Node2 = (PE3)nodeArrayList1[0];
        TGreaterThan tgreaterthanNode3 = (TGreaterThan)nodeArrayList2[0];
        PE3 pe3Node4 = (PE3)nodeArrayList3[0];
        ASide2E2 pe2Node1 = new ASide2E2 (
              pe3Node2,
              tgreaterthanNode3,
              pe3Node4
        );
        nodeList.Add(pe2Node1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE3 pe3Node2 = (PE3)nodeArrayList1[0];
        TLessThanEqual tlessthanequalNode3 = (TLessThanEqual)nodeArrayList2[0];
        PE3 pe3Node4 = (PE3)nodeArrayList3[0];
        ASide3E2 pe2Node1 = new ASide3E2 (
              pe3Node2,
              tlessthanequalNode3,
              pe3Node4
        );
        nodeList.Add(pe2Node1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE3 pe3Node2 = (PE3)nodeArrayList1[0];
        TGreaterThanEqual tgreaterthanequalNode3 = (TGreaterThanEqual)nodeArrayList2[0];
        PE3 pe3Node4 = (PE3)nodeArrayList3[0];
        ASide4E2 pe2Node1 = new ASide4E2 (
              pe3Node2,
              tgreaterthanequalNode3,
              pe3Node4
        );
        nodeList.Add(pe2Node1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE3 pe3Node2 = (PE3)nodeArrayList1[0];
        TEquivalance tequivalanceNode3 = (TEquivalance)nodeArrayList2[0];
        PE3 pe3Node4 = (PE3)nodeArrayList3[0];
        ASide5E2 pe2Node1 = new ASide5E2 (
              pe3Node2,
              tequivalanceNode3,
              pe3Node4
        );
        nodeList.Add(pe2Node1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE3 pe3Node2 = (PE3)nodeArrayList1[0];
        TEqual tequalNode3 = (TEqual)nodeArrayList2[0];
        PE3 pe3Node4 = (PE3)nodeArrayList3[0];
        ASide6E2 pe2Node1 = new ASide6E2 (
              pe3Node2,
              tequalNode3,
              pe3Node4
        );
        nodeList.Add(pe2Node1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE3 pe3Node2 = (PE3)nodeArrayList1[0];
        TNotEqual tnotequalNode3 = (TNotEqual)nodeArrayList2[0];
        PE3 pe3Node4 = (PE3)nodeArrayList3[0];
        ASide7E2 pe2Node1 = new ASide7E2 (
              pe3Node2,
              tnotequalNode3,
              pe3Node4
        );
        nodeList.Add(pe2Node1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE3 pe3Node2 = (PE3)nodeArrayList1[0];
        ASide8E2 pe2Node1 = new ASide8E2 (
              pe3Node2
        );
        nodeList.Add(pe2Node1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE3 pe3Node2 = (PE3)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PE4 pe4Node4 = (PE4)nodeArrayList3[0];
        ASide1E3 pe3Node1 = new ASide1E3 (
              pe3Node2,
              tplusNode3,
              pe4Node4
        );
        nodeList.Add(pe3Node1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE3 pe3Node2 = (PE3)nodeArrayList1[0];
        TMinus tminusNode3 = (TMinus)nodeArrayList2[0];
        PE4 pe4Node4 = (PE4)nodeArrayList3[0];
        ASide2E3 pe3Node1 = new ASide2E3 (
              pe3Node2,
              tminusNode3,
              pe4Node4
        );
        nodeList.Add(pe3Node1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE4 pe4Node2 = (PE4)nodeArrayList1[0];
        ASide3E3 pe3Node1 = new ASide3E3 (
              pe4Node2
        );
        nodeList.Add(pe3Node1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE4 pe4Node2 = (PE4)nodeArrayList1[0];
        TMultiply tmultiplyNode3 = (TMultiply)nodeArrayList2[0];
        PE5 pe5Node4 = (PE5)nodeArrayList3[0];
        ASide1E4 pe4Node1 = new ASide1E4 (
              pe4Node2,
              tmultiplyNode3,
              pe5Node4
        );
        nodeList.Add(pe4Node1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE4 pe4Node2 = (PE4)nodeArrayList1[0];
        TDivide tdivideNode3 = (TDivide)nodeArrayList2[0];
        PE5 pe5Node4 = (PE5)nodeArrayList3[0];
        ASide2E4 pe4Node1 = new ASide2E4 (
              pe4Node2,
              tdivideNode3,
              pe5Node4
        );
        nodeList.Add(pe4Node1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE5 pe5Node2 = (PE5)nodeArrayList1[0];
        ASide3E4 pe4Node1 = new ASide3E4 (
              pe5Node2
        );
        nodeList.Add(pe4Node1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLeftParenthesis tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1[0];
        PE1 pe1Node3 = (PE1)nodeArrayList2[0];
        TRightParenthesis trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3[0];
        ASide1E5 pe5Node1 = new ASide1E5 (
              tleftparenthesisNode2,
              pe1Node3,
              trightparenthesisNode4
        );
        nodeList.Add(pe5Node1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        ASide2E5 pe5Node1 = new ASide2E5 (
              tvariableNode2
        );
        nodeList.Add(pe5Node1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInt tintNode2 = (TInt)nodeArrayList1[0];
        ASide3E5 pe5Node1 = new ASide3E5 (
              tintNode2
        );
        nodeList.Add(pe5Node1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloat tfloatNode2 = (TFloat)nodeArrayList1[0];
        ASide4E5 pe5Node1 = new ASide4E5 (
              tfloatNode2
        );
        nodeList.Add(pe5Node1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TLeftBracket tleftbracketNode3 = (TLeftBracket)nodeArrayList2[0];
        PE1 pe1Node4 = (PE1)nodeArrayList3[0];
        TRightBracket trightbracketNode5 = (TRightBracket)nodeArrayList4[0];
        ASide5E5 pe5Node1 = new ASide5E5 (
              tvariableNode2,
              tleftbracketNode3,
              pe1Node4,
              trightbracketNode5
        );
        nodeList.Add(pe5Node1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TSemicolon tsemicolonNode4 = (TSemicolon)nodeArrayList3[0];
        ASide1Vardecl pvardeclNode1 = new ASide1Vardecl (
              tvariableNode2,
              tvariableNode3,
              tsemicolonNode4
        );
        nodeList.Add(pvardeclNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TEqual tequalNode4 = (TEqual)nodeArrayList3[0];
        TInt tintNode5 = (TInt)nodeArrayList4[0];
        TSemicolon tsemicolonNode6 = (TSemicolon)nodeArrayList5[0];
        ASide2Vardecl pvardeclNode1 = new ASide2Vardecl (
              tvariableNode2,
              tvariableNode3,
              tequalNode4,
              tintNode5,
              tsemicolonNode6
        );
        nodeList.Add(pvardeclNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TEqual tequalNode4 = (TEqual)nodeArrayList3[0];
        TMinus tminusNode5 = (TMinus)nodeArrayList4[0];
        TInt tintNode6 = (TInt)nodeArrayList5[0];
        TSemicolon tsemicolonNode7 = (TSemicolon)nodeArrayList6[0];
        ASide3Vardecl pvardeclNode1 = new ASide3Vardecl (
              tvariableNode2,
              tvariableNode3,
              tequalNode4,
              tminusNode5,
              tintNode6,
              tsemicolonNode7
        );
        nodeList.Add(pvardeclNode1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TEqual tequalNode4 = (TEqual)nodeArrayList3[0];
        TFloat tfloatNode5 = (TFloat)nodeArrayList4[0];
        TSemicolon tsemicolonNode6 = (TSemicolon)nodeArrayList5[0];
        ASide5Vardecl pvardeclNode1 = new ASide5Vardecl (
              tvariableNode2,
              tvariableNode3,
              tequalNode4,
              tfloatNode5,
              tsemicolonNode6
        );
        nodeList.Add(pvardeclNode1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TEqual tequalNode4 = (TEqual)nodeArrayList3[0];
        TMinus tminusNode5 = (TMinus)nodeArrayList4[0];
        TFloat tfloatNode6 = (TFloat)nodeArrayList5[0];
        TSemicolon tsemicolonNode7 = (TSemicolon)nodeArrayList6[0];
        ASide6Vardecl pvardeclNode1 = new ASide6Vardecl (
              tvariableNode2,
              tvariableNode3,
              tequalNode4,
              tminusNode5,
              tfloatNode6,
              tsemicolonNode7
        );
        nodeList.Add(pvardeclNode1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TEqual tequalNode4 = (TEqual)nodeArrayList3[0];
        TString tstringNode5 = (TString)nodeArrayList4[0];
        TSemicolon tsemicolonNode6 = (TSemicolon)nodeArrayList5[0];
        ASide7Vardecl pvardeclNode1 = new ASide7Vardecl (
              tvariableNode2,
              tvariableNode3,
              tequalNode4,
              tstringNode5,
              tsemicolonNode6
        );
        nodeList.Add(pvardeclNode1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TEqual tequalNode3 = (TEqual)nodeArrayList2[0];
        PE1 pe1Node4 = (PE1)nodeArrayList3[0];
        TSemicolon tsemicolonNode5 = (TSemicolon)nodeArrayList4[0];
        ASide1Varassign pvarassignNode1 = new ASide1Varassign (
              tvariableNode2,
              tequalNode3,
              pe1Node4,
              tsemicolonNode5
        );
        nodeList.Add(pvarassignNode1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TPublic tpublicNode2 = (TPublic)nodeArrayList1[0];
        TStatic tstaticNode3 = (TStatic)nodeArrayList2[0];
        TVariable tvariableNode4 = (TVariable)nodeArrayList3[0];
        PFormalParams pformalparamsNode5 = (PFormalParams)nodeArrayList4[0];
        TLeftCurlyBrace tleftcurlybraceNode6 = (TLeftCurlyBrace)nodeArrayList5[0];
        PList plistNode7 = (PList)nodeArrayList6[0];
        TRightCurlyBrace trightcurlybraceNode8 = (TRightCurlyBrace)nodeArrayList7[0];
        APublicStaticMethodDeclare pmethoddeclareNode1 = new APublicStaticMethodDeclare (
              tpublicNode2,
              tstaticNode3,
              tvariableNode4,
              pformalparamsNode5,
              tleftcurlybraceNode6,
              plistNode7,
              trightcurlybraceNode8
        );
        nodeList.Add(pmethoddeclareNode1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TPrivate tprivateNode2 = (TPrivate)nodeArrayList1[0];
        TStatic tstaticNode3 = (TStatic)nodeArrayList2[0];
        TVariable tvariableNode4 = (TVariable)nodeArrayList3[0];
        PFormalParams pformalparamsNode5 = (PFormalParams)nodeArrayList4[0];
        TLeftCurlyBrace tleftcurlybraceNode6 = (TLeftCurlyBrace)nodeArrayList5[0];
        PList plistNode7 = (PList)nodeArrayList6[0];
        TRightCurlyBrace trightcurlybraceNode8 = (TRightCurlyBrace)nodeArrayList7[0];
        APrivateStaticMethodDeclare pmethoddeclareNode1 = new APrivateStaticMethodDeclare (
              tprivateNode2,
              tstaticNode3,
              tvariableNode4,
              pformalparamsNode5,
              tleftcurlybraceNode6,
              plistNode7,
              trightcurlybraceNode8
        );
        nodeList.Add(pmethoddeclareNode1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TPublic tpublicNode2 = (TPublic)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        PFormalParams pformalparamsNode4 = (PFormalParams)nodeArrayList3[0];
        TLeftCurlyBrace tleftcurlybraceNode5 = (TLeftCurlyBrace)nodeArrayList4[0];
        PList plistNode6 = (PList)nodeArrayList5[0];
        TRightCurlyBrace trightcurlybraceNode7 = (TRightCurlyBrace)nodeArrayList6[0];
        APublicMethodDeclare pmethoddeclareNode1 = new APublicMethodDeclare (
              tpublicNode2,
              tvariableNode3,
              pformalparamsNode4,
              tleftcurlybraceNode5,
              plistNode6,
              trightcurlybraceNode7
        );
        nodeList.Add(pmethoddeclareNode1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TPrivate tprivateNode2 = (TPrivate)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        PFormalParams pformalparamsNode4 = (PFormalParams)nodeArrayList3[0];
        TLeftCurlyBrace tleftcurlybraceNode5 = (TLeftCurlyBrace)nodeArrayList4[0];
        PList plistNode6 = (PList)nodeArrayList5[0];
        TRightCurlyBrace trightcurlybraceNode7 = (TRightCurlyBrace)nodeArrayList6[0];
        APrivateMethodDeclare pmethoddeclareNode1 = new APrivateMethodDeclare (
              tprivateNode2,
              tvariableNode3,
              pformalparamsNode4,
              tleftcurlybraceNode5,
              plistNode6,
              trightcurlybraceNode7
        );
        nodeList.Add(pmethoddeclareNode1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLeftParenthesis tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1[0];
        PContent pcontentNode3 = (PContent)nodeArrayList2[0];
        TRightParenthesis trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3[0];
        AParamsFormalParams pformalparamsNode1 = new AParamsFormalParams (
              tleftparenthesisNode2,
              pcontentNode3,
              trightparenthesisNode4
        );
        nodeList.Add(pformalparamsNode1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLeftParenthesis tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1[0];
        TRightParenthesis trightparenthesisNode3 = (TRightParenthesis)nodeArrayList2[0];
        ANoParamsFormalParams pformalparamsNode1 = new ANoParamsFormalParams (
              tleftparenthesisNode2,
              trightparenthesisNode3
        );
        nodeList.Add(pformalparamsNode1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PContent pcontentNode2 = (PContent)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        TVariable tvariableNode4 = (TVariable)nodeArrayList3[0];
        TVariable tvariableNode5 = (TVariable)nodeArrayList4[0];
        ATwoPartsContent pcontentNode1 = new ATwoPartsContent (
              pcontentNode2,
              tcommaNode3,
              tvariableNode4,
              tvariableNode5
        );
        nodeList.Add(pcontentNode1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        AOnePartContent pcontentNode1 = new AOnePartContent (
              tvariableNode2,
              tvariableNode3
        );
        nodeList.Add(pcontentNode1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        PActualParams pactualparamsNode3 = (PActualParams)nodeArrayList2[0];
        TSemicolon tsemicolonNode4 = (TSemicolon)nodeArrayList3[0];
        AMethodCall pmethodcallNode1 = new AMethodCall (
              tvariableNode2,
              pactualparamsNode3,
              tsemicolonNode4
        );
        nodeList.Add(pmethodcallNode1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLeftParenthesis tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1[0];
        PExpression pexpressionNode3 = (PExpression)nodeArrayList2[0];
        TRightParenthesis trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3[0];
        AParamsActualParams pactualparamsNode1 = new AParamsActualParams (
              tleftparenthesisNode2,
              pexpressionNode3,
              trightparenthesisNode4
        );
        nodeList.Add(pactualparamsNode1);
        return nodeList;
    }
    ArrayList New54()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLeftParenthesis tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1[0];
        TRightParenthesis trightparenthesisNode3 = (TRightParenthesis)nodeArrayList2[0];
        ANoParamsActualParams pactualparamsNode1 = new ANoParamsActualParams (
              tleftparenthesisNode2,
              trightparenthesisNode3
        );
        nodeList.Add(pactualparamsNode1);
        return nodeList;
    }
    ArrayList New55()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        TString tstringNode4 = (TString)nodeArrayList3[0];
        ATwoPartsStringExpression pexpressionNode1 = new ATwoPartsStringExpression (
              pexpressionNode2,
              tcommaNode3,
              tstringNode4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New56()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PE1 pe1Node4 = (PE1)nodeArrayList3[0];
        ATwoPartsBooleanExpression pexpressionNode1 = new ATwoPartsBooleanExpression (
              pexpressionNode2,
              tcommaNode3,
              pe1Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New57()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        ABaseStringExpression pexpressionNode1 = new ABaseStringExpression (
              tstringNode2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New58()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PE1 pe1Node2 = (PE1)nodeArrayList1[0];
        ABaseBooleanExpression pexpressionNode1 = new ABaseBooleanExpression (
              pe1Node2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New59()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList11 = (ArrayList) Pop();
        ArrayList nodeArrayList10 = (ArrayList) Pop();
        ArrayList nodeArrayList9 = (ArrayList) Pop();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TLeftParenthesis tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2[0];
        PE1 pe1Node4 = (PE1)nodeArrayList3[0];
        TRightParenthesis trightparenthesisNode5 = (TRightParenthesis)nodeArrayList4[0];
        TLeftCurlyBrace tleftcurlybraceNode6 = (TLeftCurlyBrace)nodeArrayList5[0];
        PList plistNode7 = (PList)nodeArrayList6[0];
        TRightCurlyBrace trightcurlybraceNode8 = (TRightCurlyBrace)nodeArrayList7[0];
        TElse telseNode9 = (TElse)nodeArrayList8[0];
        TLeftCurlyBrace tleftcurlybraceNode10 = (TLeftCurlyBrace)nodeArrayList9[0];
        PList plistNode11 = (PList)nodeArrayList10[0];
        TRightCurlyBrace trightcurlybraceNode12 = (TRightCurlyBrace)nodeArrayList11[0];
        ASide1IfStatement pifstatementNode1 = new ASide1IfStatement (
              tifNode2,
              tleftparenthesisNode3,
              pe1Node4,
              trightparenthesisNode5,
              tleftcurlybraceNode6,
              plistNode7,
              trightcurlybraceNode8,
              telseNode9,
              tleftcurlybraceNode10,
              plistNode11,
              trightcurlybraceNode12
        );
        nodeList.Add(pifstatementNode1);
        return nodeList;
    }
    ArrayList New60()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TLeftParenthesis tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2[0];
        PE1 pe1Node4 = (PE1)nodeArrayList3[0];
        TRightParenthesis trightparenthesisNode5 = (TRightParenthesis)nodeArrayList4[0];
        TLeftCurlyBrace tleftcurlybraceNode6 = (TLeftCurlyBrace)nodeArrayList5[0];
        PList plistNode7 = (PList)nodeArrayList6[0];
        TRightCurlyBrace trightcurlybraceNode8 = (TRightCurlyBrace)nodeArrayList7[0];
        ASide2IfStatement pifstatementNode1 = new ASide2IfStatement (
              tifNode2,
              tleftparenthesisNode3,
              pe1Node4,
              trightparenthesisNode5,
              tleftcurlybraceNode6,
              plistNode7,
              trightcurlybraceNode8
        );
        nodeList.Add(pifstatementNode1);
        return nodeList;
    }
    ArrayList New61()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TWhile twhileNode2 = (TWhile)nodeArrayList1[0];
        TLeftParenthesis tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2[0];
        PE1 pe1Node4 = (PE1)nodeArrayList3[0];
        TRightParenthesis trightparenthesisNode5 = (TRightParenthesis)nodeArrayList4[0];
        TLeftCurlyBrace tleftcurlybraceNode6 = (TLeftCurlyBrace)nodeArrayList5[0];
        PList plistNode7 = (PList)nodeArrayList6[0];
        TRightCurlyBrace trightcurlybraceNode8 = (TRightCurlyBrace)nodeArrayList7[0];
        AWhileStatement pwhilestatementNode1 = new AWhileStatement (
              twhileNode2,
              tleftparenthesisNode3,
              pe1Node4,
              trightparenthesisNode5,
              tleftcurlybraceNode6,
              plistNode7,
              trightcurlybraceNode8
        );
        nodeList.Add(pwhilestatementNode1);
        return nodeList;
    }
    ArrayList New62()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList11 = (ArrayList) Pop();
        ArrayList nodeArrayList10 = (ArrayList) Pop();
        ArrayList nodeArrayList9 = (ArrayList) Pop();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TLeftBracket tleftbracketNode3 = (TLeftBracket)nodeArrayList2[0];
        TRightBracket trightbracketNode4 = (TRightBracket)nodeArrayList3[0];
        TVariable tvariableNode5 = (TVariable)nodeArrayList4[0];
        TEqual tequalNode6 = (TEqual)nodeArrayList5[0];
        TVariable tvariableNode7 = (TVariable)nodeArrayList6[0];
        TVariable tvariableNode8 = (TVariable)nodeArrayList7[0];
        TLeftBracket tleftbracketNode9 = (TLeftBracket)nodeArrayList8[0];
        PE1 pe1Node10 = (PE1)nodeArrayList9[0];
        TRightBracket trightbracketNode11 = (TRightBracket)nodeArrayList10[0];
        TSemicolon tsemicolonNode12 = (TSemicolon)nodeArrayList11[0];
        AArrayCreate parraycreateNode1 = new AArrayCreate (
              tvariableNode2,
              tleftbracketNode3,
              trightbracketNode4,
              tvariableNode5,
              tequalNode6,
              tvariableNode7,
              tvariableNode8,
              tleftbracketNode9,
              pe1Node10,
              trightbracketNode11,
              tsemicolonNode12
        );
        nodeList.Add(parraycreateNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {16, 0, 1},
      },
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {16, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {38, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {1, 0, 15},
        new int[] {2, 0, 16},
        new int[] {6, 0, 17},
      },
      new int[][] {
        new int[] {-1, 1, 34},
      },
      new int[][] {
        new int[] {-1, 1, 35},
      },
      new int[][] {
        new int[] {-1, 1, 33},
        new int[] {24, 0, 20},
      },
      new int[][] {
        new int[] {-1, 3, 9},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 17},
        new int[] {28, 0, 23},
        new int[] {29, 0, 24},
      },
      new int[][] {
        new int[] {-1, 1, 25},
        new int[] {18, 0, 25},
        new int[] {19, 0, 26},
        new int[] {31, 0, 27},
        new int[] {32, 0, 28},
        new int[] {33, 0, 29},
        new int[] {34, 0, 30},
        new int[] {35, 0, 31},
        new int[] {36, 0, 32},
        new int[] {37, 0, 33},
      },
      new int[][] {
        new int[] {-1, 1, 28},
        new int[] {20, 0, 34},
        new int[] {21, 0, 35},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 3, 15},
        new int[] {4, 0, 36},
        new int[] {15, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 16},
        new int[] {4, 0, 38},
        new int[] {15, 0, 39},
      },
      new int[][] {
        new int[] {-1, 3, 17},
        new int[] {22, 0, 40},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 21},
        new int[] {23, 0, 42},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {17, 0, 43},
      },
      new int[][] {
        new int[] {-1, 3, 23},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 24},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 25},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 26},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 27},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 28},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 29},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 30},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 32},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 33},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 34},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 35},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 36},
        new int[] {15, 0, 58},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {22, 0, 59},
      },
      new int[][] {
        new int[] {-1, 3, 38},
        new int[] {15, 0, 61},
      },
      new int[][] {
        new int[] {-1, 3, 39},
        new int[] {22, 0, 59},
      },
      new int[][] {
        new int[] {-1, 3, 40},
        new int[] {23, 0, 63},
      },
      new int[][] {
        new int[] {-1, 3, 41},
        new int[] {25, 0, 64},
      },
      new int[][] {
        new int[] {-1, 1, 32},
      },
      new int[][] {
        new int[] {-1, 3, 43},
        new int[] {12, 0, 65},
        new int[] {13, 0, 66},
      },
      new int[][] {
        new int[] {-1, 3, 44},
        new int[] {7, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 26},
        new int[] {20, 0, 34},
        new int[] {21, 0, 35},
      },
      new int[][] {
        new int[] {-1, 1, 27},
        new int[] {20, 0, 34},
        new int[] {21, 0, 35},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {18, 0, 25},
        new int[] {19, 0, 26},
      },
      new int[][] {
        new int[] {-1, 1, 19},
        new int[] {18, 0, 25},
        new int[] {19, 0, 26},
      },
      new int[][] {
        new int[] {-1, 1, 20},
        new int[] {18, 0, 25},
        new int[] {19, 0, 26},
      },
      new int[][] {
        new int[] {-1, 1, 21},
        new int[] {18, 0, 25},
        new int[] {19, 0, 26},
      },
      new int[][] {
        new int[] {-1, 1, 22},
        new int[] {18, 0, 25},
        new int[] {19, 0, 26},
      },
      new int[][] {
        new int[] {-1, 1, 23},
        new int[] {18, 0, 25},
        new int[] {19, 0, 26},
      },
      new int[][] {
        new int[] {-1, 1, 24},
        new int[] {18, 0, 25},
        new int[] {19, 0, 26},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 1, 30},
      },
      new int[][] {
        new int[] {-1, 3, 58},
        new int[] {22, 0, 59},
      },
      new int[][] {
        new int[] {-1, 3, 59},
        new int[] {15, 0, 69},
        new int[] {23, 0, 70},
      },
      new int[][] {
        new int[] {-1, 3, 60},
        new int[] {26, 0, 72},
      },
      new int[][] {
        new int[] {-1, 3, 61},
        new int[] {22, 0, 59},
      },
      new int[][] {
        new int[] {-1, 3, 62},
        new int[] {26, 0, 74},
      },
      new int[][] {
        new int[] {-1, 3, 63},
        new int[] {26, 0, 75},
      },
      new int[][] {
        new int[] {-1, 1, 36},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 3, 68},
        new int[] {26, 0, 76},
      },
      new int[][] {
        new int[] {-1, 3, 69},
        new int[] {15, 0, 77},
      },
      new int[][] {
        new int[] {-1, 1, 49},
      },
      new int[][] {
        new int[] {-1, 3, 71},
        new int[] {8, 0, 78},
        new int[] {23, 0, 79},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 3, 73},
        new int[] {26, 0, 90},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 51},
      },
      new int[][] {
        new int[] {-1, 3, 78},
        new int[] {15, 0, 94},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 3, 80},
        new int[] {22, 0, 95},
      },
      new int[][] {
        new int[] {-1, 3, 81},
        new int[] {22, 0, 96},
      },
      new int[][] {
        new int[] {-1, 3, 82},
        new int[] {15, 0, 97},
        new int[] {22, 0, 98},
        new int[] {24, 0, 99},
        new int[] {36, 0, 100},
      },
      new int[][] {
        new int[] {-1, 3, 83},
        new int[] {27, 0, 102},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 3, 91},
        new int[] {27, 0, 110},
      },
      new int[][] {
        new int[] {-1, 3, 92},
        new int[] {27, 0, 111},
      },
      new int[][] {
        new int[] {-1, 3, 93},
        new int[] {27, 0, 112},
      },
      new int[][] {
        new int[] {-1, 3, 94},
        new int[] {15, 0, 113},
      },
      new int[][] {
        new int[] {-1, 3, 95},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 96},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 97},
        new int[] {7, 0, 116},
        new int[] {36, 0, 117},
      },
      new int[][] {
        new int[] {-1, 3, 98},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {14, 0, 118},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
        new int[] {23, 0, 119},
      },
      new int[][] {
        new int[] {-1, 3, 99},
        new int[] {25, 0, 122},
      },
      new int[][] {
        new int[] {-1, 3, 100},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 101},
        new int[] {7, 0, 124},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 3, 109},
        new int[] {27, 0, 125},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 1, 44},
      },
      new int[][] {
        new int[] {-1, 1, 50},
      },
      new int[][] {
        new int[] {-1, 3, 114},
        new int[] {23, 0, 126},
      },
      new int[][] {
        new int[] {-1, 3, 115},
        new int[] {23, 0, 127},
      },
      new int[][] {
        new int[] {-1, 1, 37},
      },
      new int[][] {
        new int[] {-1, 3, 117},
        new int[] {12, 0, 128},
        new int[] {13, 0, 129},
        new int[] {14, 0, 130},
        new int[] {19, 0, 131},
      },
      new int[][] {
        new int[] {-1, 1, 57},
      },
      new int[][] {
        new int[] {-1, 1, 54},
      },
      new int[][] {
        new int[] {-1, 1, 58},
      },
      new int[][] {
        new int[] {-1, 3, 121},
        new int[] {8, 0, 132},
        new int[] {23, 0, 133},
      },
      new int[][] {
        new int[] {-1, 3, 122},
        new int[] {15, 0, 134},
      },
      new int[][] {
        new int[] {-1, 3, 123},
        new int[] {7, 0, 135},
      },
      new int[][] {
        new int[] {-1, 1, 52},
      },
      new int[][] {
        new int[] {-1, 1, 45},
      },
      new int[][] {
        new int[] {-1, 3, 126},
        new int[] {26, 0, 136},
      },
      new int[][] {
        new int[] {-1, 3, 127},
        new int[] {26, 0, 137},
      },
      new int[][] {
        new int[] {-1, 3, 128},
        new int[] {7, 0, 138},
      },
      new int[][] {
        new int[] {-1, 3, 129},
        new int[] {7, 0, 139},
      },
      new int[][] {
        new int[] {-1, 3, 130},
        new int[] {7, 0, 140},
      },
      new int[][] {
        new int[] {-1, 3, 131},
        new int[] {12, 0, 141},
        new int[] {13, 0, 142},
      },
      new int[][] {
        new int[] {-1, 3, 132},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {14, 0, 143},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 53},
      },
      new int[][] {
        new int[] {-1, 3, 134},
        new int[] {36, 0, 145},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 38},
      },
      new int[][] {
        new int[] {-1, 1, 40},
      },
      new int[][] {
        new int[] {-1, 1, 42},
      },
      new int[][] {
        new int[] {-1, 3, 141},
        new int[] {7, 0, 148},
      },
      new int[][] {
        new int[] {-1, 3, 142},
        new int[] {7, 0, 149},
      },
      new int[][] {
        new int[] {-1, 1, 55},
      },
      new int[][] {
        new int[] {-1, 1, 56},
      },
      new int[][] {
        new int[] {-1, 3, 145},
        new int[] {15, 0, 150},
      },
      new int[][] {
        new int[] {-1, 3, 146},
        new int[] {27, 0, 151},
      },
      new int[][] {
        new int[] {-1, 3, 147},
        new int[] {27, 0, 152},
      },
      new int[][] {
        new int[] {-1, 1, 39},
      },
      new int[][] {
        new int[] {-1, 1, 41},
      },
      new int[][] {
        new int[] {-1, 3, 150},
        new int[] {15, 0, 153},
      },
      new int[][] {
        new int[] {-1, 1, 60},
        new int[] {10, 0, 154},
      },
      new int[][] {
        new int[] {-1, 1, 61},
      },
      new int[][] {
        new int[] {-1, 3, 153},
        new int[] {24, 0, 155},
      },
      new int[][] {
        new int[] {-1, 3, 154},
        new int[] {26, 0, 156},
      },
      new int[][] {
        new int[] {-1, 3, 155},
        new int[] {12, 0, 6},
        new int[] {13, 0, 7},
        new int[] {15, 0, 8},
        new int[] {22, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {9, 0, 80},
        new int[] {11, 0, 81},
        new int[] {15, 0, 82},
      },
      new int[][] {
        new int[] {-1, 3, 157},
        new int[] {25, 0, 159},
      },
      new int[][] {
        new int[] {-1, 3, 158},
        new int[] {27, 0, 160},
      },
      new int[][] {
        new int[] {-1, 3, 159},
        new int[] {7, 0, 161},
      },
      new int[][] {
        new int[] {-1, 1, 59},
      },
      new int[][] {
        new int[] {-1, 1, 62},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 18},
      },
      new int[][] {
        new int[] {-1, 5},
      },
      new int[][] {
        new int[] {-1, 3},
        new int[] {1, 4},
      },
      new int[][] {
        new int[] {-1, 44},
      },
      new int[][] {
        new int[] {-1, 83},
        new int[] {74, 91},
        new int[] {75, 92},
        new int[] {76, 93},
        new int[] {84, 103},
        new int[] {85, 104},
        new int[] {86, 105},
        new int[] {87, 106},
        new int[] {88, 107},
        new int[] {89, 108},
        new int[] {90, 109},
        new int[] {136, 146},
        new int[] {137, 147},
        new int[] {156, 158},
      },
      new int[][] {
        new int[] {-1, 10},
        new int[] {9, 21},
        new int[] {10, 22},
        new int[] {20, 41},
        new int[] {95, 114},
        new int[] {96, 115},
        new int[] {98, 120},
        new int[] {100, 123},
        new int[] {132, 144},
        new int[] {155, 157},
      },
      new int[][] {
        new int[] {-1, 11},
        new int[] {23, 45},
        new int[] {24, 46},
      },
      new int[][] {
        new int[] {-1, 12},
        new int[] {27, 49},
        new int[] {28, 50},
        new int[] {29, 51},
        new int[] {30, 52},
        new int[] {31, 53},
        new int[] {32, 54},
        new int[] {33, 55},
      },
      new int[][] {
        new int[] {-1, 13},
        new int[] {25, 47},
        new int[] {26, 48},
      },
      new int[][] {
        new int[] {-1, 14},
        new int[] {34, 56},
        new int[] {35, 57},
      },
      new int[][] {
        new int[] {-1, 84},
      },
      new int[][] {
        new int[] {-1, 85},
      },
      new int[][] {
        new int[] {-1, 19},
      },
      new int[][] {
        new int[] {-1, 60},
        new int[] {39, 62},
        new int[] {58, 68},
        new int[] {61, 73},
      },
      new int[][] {
        new int[] {-1, 71},
      },
      new int[][] {
        new int[] {-1, 86},
      },
      new int[][] {
        new int[] {-1, 101},
      },
      new int[][] {
        new int[] {-1, 121},
      },
      new int[][] {
        new int[] {-1, 87},
      },
      new int[][] {
        new int[] {-1, 88},
      },
      new int[][] {
        new int[] {-1, 89},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'public', 'private', 'main', 'final'",
      "expecting: int, float, variable, 'final', '('",
      "expecting: EOF",
      "expecting: 'public', 'private', 'main'",
      "expecting: int, float, variable, '('",
      "expecting: ';', ',', int, float, variable, ':=', '+', '-', '*', '/', '(', ')', ']', '&&', '||', '<', '>', '<=', '>=', '==', '=', '!='",
      "expecting: ';', ',', int, float, variable, ':=', '+', '-', '*', '/', '(', ')', '[', ']', '&&', '||', '<', '>', '<=', '>=', '==', '=', '!='",
      "expecting: ';', ',', int, float, variable, ':=', '(', ')', ']', '&&', '||'",
      "expecting: ';', ',', int, float, variable, ':=', '+', '-', '(', ')', ']', '&&', '||', '<', '>', '<=', '>=', '==', '=', '!='",
      "expecting: 'static', variable",
      "expecting: '('",
      "expecting: ')'",
      "expecting: ':='",
      "expecting: variable",
      "expecting: ']'",
      "expecting: int, float",
      "expecting: ';'",
      "expecting: ';', ',', int, float, variable, ':=', '(', ')', ']'",
      "expecting: ';', ',', int, float, variable, ':=', '+', '-', '(', ')', ']', '&&', '||'",
      "expecting: variable, ')'",
      "expecting: '{'",
      "expecting: 'public', 'private', 'main', int, float, variable, '('",
      "expecting: ',', ')'",
      "expecting: 'if', 'while', variable, '}'",
      "expecting: variable, '(', '[', '='",
      "expecting: '}'",
      "expecting: ';', '='",
      "expecting: int, float, string, variable, '(', ')'",
      "expecting: int, float, string, '-'",
      "expecting: int, float, string, variable, '('",
      "expecting: '='",
      "expecting: 'if', 'else', 'while', variable, '}'",
      "expecting: '['",
    };

    private static int[] errors = {
      0, 1, 2, 3, 4, 3, 5, 5, 6, 4, 4, 7, 8, 5, 5, 9, 
      9, 10, 2, 3, 4, 11, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
      4, 4, 4, 4, 13, 10, 13, 10, 11, 14, 5, 15, 16, 17, 17, 5, 
      5, 18, 18, 18, 18, 18, 18, 18, 5, 5, 10, 19, 20, 10, 20, 20, 
      5, 16, 16, 21, 20, 13, 20, 22, 23, 20, 23, 23, 23, 22, 13, 20, 
      10, 10, 24, 25, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 13, 4, 
      4, 26, 27, 14, 4, 16, 3, 25, 25, 25, 25, 25, 25, 25, 3, 2, 
      3, 22, 11, 11, 23, 28, 22, 16, 22, 22, 13, 16, 23, 3, 20, 20, 
      16, 16, 16, 15, 29, 16, 30, 23, 23, 23, 23, 23, 23, 16, 16, 22, 
      22, 13, 25, 25, 23, 23, 13, 31, 23, 32, 20, 4, 23, 14, 25, 16, 
      23, 23, 
    };
}
}
