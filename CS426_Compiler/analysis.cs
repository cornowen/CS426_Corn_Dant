/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using comp5210.node;

namespace comp5210.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAMainMethod(AMainMethod node);
    void CaseAMethodRecurseMethod(AMethodRecurseMethod node);
    void CaseANothingMethod(ANothingMethod node);
    void CaseAConstantinitConstants(AConstantinitConstants node);
    void CaseANothingConstants(ANothingConstants node);
    void CaseAIntizationInitialization(AIntizationInitialization node);
    void CaseAFloatizationInitialization(AFloatizationInitialization node);
    void CaseAFirstList(AFirstList node);
    void CaseASecondList(ASecondList node);
    void CaseAThirdList(AThirdList node);
    void CaseAFourthList(AFourthList node);
    void CaseAWhileList(AWhileList node);
    void CaseAArrayList(AArrayList node);
    void CaseANothingList(ANothingList node);
    void CaseASide1E1(ASide1E1 node);
    void CaseASide2E1(ASide2E1 node);
    void CaseASide3E1(ASide3E1 node);
    void CaseASide1E2(ASide1E2 node);
    void CaseASide2E2(ASide2E2 node);
    void CaseASide3E2(ASide3E2 node);
    void CaseASide4E2(ASide4E2 node);
    void CaseASide5E2(ASide5E2 node);
    void CaseASide6E2(ASide6E2 node);
    void CaseASide7E2(ASide7E2 node);
    void CaseASide8E2(ASide8E2 node);
    void CaseASide1E3(ASide1E3 node);
    void CaseASide2E3(ASide2E3 node);
    void CaseASide3E3(ASide3E3 node);
    void CaseASide1E4(ASide1E4 node);
    void CaseASide2E4(ASide2E4 node);
    void CaseASide3E4(ASide3E4 node);
    void CaseASide1E5(ASide1E5 node);
    void CaseASide2E5(ASide2E5 node);
    void CaseASide3E5(ASide3E5 node);
    void CaseASide4E5(ASide4E5 node);
    void CaseASide5E5(ASide5E5 node);
    void CaseASide1Vardecl(ASide1Vardecl node);
    void CaseASide2Vardecl(ASide2Vardecl node);
    void CaseASide3Vardecl(ASide3Vardecl node);
    void CaseASide5Vardecl(ASide5Vardecl node);
    void CaseASide6Vardecl(ASide6Vardecl node);
    void CaseASide7Vardecl(ASide7Vardecl node);
    void CaseASide1Varassign(ASide1Varassign node);
    void CaseAPublicStaticMethodDeclare(APublicStaticMethodDeclare node);
    void CaseAPrivateStaticMethodDeclare(APrivateStaticMethodDeclare node);
    void CaseAPublicMethodDeclare(APublicMethodDeclare node);
    void CaseAPrivateMethodDeclare(APrivateMethodDeclare node);
    void CaseAParamsFormalParams(AParamsFormalParams node);
    void CaseANoParamsFormalParams(ANoParamsFormalParams node);
    void CaseATwoPartsContent(ATwoPartsContent node);
    void CaseAOnePartContent(AOnePartContent node);
    void CaseAMethodCall(AMethodCall node);
    void CaseAParamsActualParams(AParamsActualParams node);
    void CaseANoParamsActualParams(ANoParamsActualParams node);
    void CaseATwoPartsStringExpression(ATwoPartsStringExpression node);
    void CaseATwoPartsBooleanExpression(ATwoPartsBooleanExpression node);
    void CaseABaseStringExpression(ABaseStringExpression node);
    void CaseABaseBooleanExpression(ABaseBooleanExpression node);
    void CaseASide1IfStatement(ASide1IfStatement node);
    void CaseASide2IfStatement(ASide2IfStatement node);
    void CaseAWhileStatement(AWhileStatement node);
    void CaseAArrayCreate(AArrayCreate node);

    void CaseTWhitespace(TWhitespace node);
    void CaseTComment(TComment node);
    void CaseTClass(TClass node);
    void CaseTPublic(TPublic node);
    void CaseTPrivate(TPrivate node);
    void CaseTReturn(TReturn node);
    void CaseTStatic(TStatic node);
    void CaseTVoid(TVoid node);
    void CaseTMain(TMain node);
    void CaseTSemicolon(TSemicolon node);
    void CaseTComma(TComma node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTWhile(TWhile node);
    void CaseTInt(TInt node);
    void CaseTFloat(TFloat node);
    void CaseTString(TString node);
    void CaseTVariable(TVariable node);
    void CaseTConstant(TConstant node);
    void CaseTInit(TInit node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTMultiply(TMultiply node);
    void CaseTDivide(TDivide node);
    void CaseTLeftParenthesis(TLeftParenthesis node);
    void CaseTRightParenthesis(TRightParenthesis node);
    void CaseTLeftBracket(TLeftBracket node);
    void CaseTRightBracket(TRightBracket node);
    void CaseTLeftCurlyBrace(TLeftCurlyBrace node);
    void CaseTRightCurlyBrace(TRightCurlyBrace node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTLessThan(TLessThan node);
    void CaseTGreaterThan(TGreaterThan node);
    void CaseTLessThanEqual(TLessThanEqual node);
    void CaseTGreaterThanEqual(TGreaterThanEqual node);
    void CaseTEquivalance(TEquivalance node);
    void CaseTEqual(TEqual node);
    void CaseTNotEqual(TNotEqual node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainMethod(AMainMethod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodRecurseMethod(AMethodRecurseMethod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANothingMethod(ANothingMethod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantinitConstants(AConstantinitConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANothingConstants(ANothingConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntizationInitialization(AIntizationInitialization node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatizationInitialization(AFloatizationInitialization node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFirstList(AFirstList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASecondList(ASecondList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThirdList(AThirdList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFourthList(AFourthList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileList(AWhileList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayList(AArrayList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANothingList(ANothingList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide1E1(ASide1E1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide2E1(ASide2E1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide3E1(ASide3E1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide1E2(ASide1E2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide2E2(ASide2E2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide3E2(ASide3E2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide4E2(ASide4E2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide5E2(ASide5E2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide6E2(ASide6E2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide7E2(ASide7E2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide8E2(ASide8E2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide1E3(ASide1E3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide2E3(ASide2E3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide3E3(ASide3E3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide1E4(ASide1E4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide2E4(ASide2E4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide3E4(ASide3E4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide1E5(ASide1E5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide2E5(ASide2E5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide3E5(ASide3E5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide4E5(ASide4E5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide5E5(ASide5E5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide1Vardecl(ASide1Vardecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide2Vardecl(ASide2Vardecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide3Vardecl(ASide3Vardecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide5Vardecl(ASide5Vardecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide6Vardecl(ASide6Vardecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide7Vardecl(ASide7Vardecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide1Varassign(ASide1Varassign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPublicStaticMethodDeclare(APublicStaticMethodDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPrivateStaticMethodDeclare(APrivateStaticMethodDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPublicMethodDeclare(APublicMethodDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPrivateMethodDeclare(APrivateMethodDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamsFormalParams(AParamsFormalParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoParamsFormalParams(ANoParamsFormalParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoPartsContent(ATwoPartsContent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOnePartContent(AOnePartContent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodCall(AMethodCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamsActualParams(AParamsActualParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoParamsActualParams(ANoParamsActualParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoPartsStringExpression(ATwoPartsStringExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoPartsBooleanExpression(ATwoPartsBooleanExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABaseStringExpression(ABaseStringExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABaseBooleanExpression(ABaseBooleanExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide1IfStatement(ASide1IfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide2IfStatement(ASide2IfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatement(AWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayCreate(AArrayCreate node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClass(TClass node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPublic(TPublic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPrivate(TPrivate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStatic(TStatic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVoid(TVoid node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSemicolon(TSemicolon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInt(TInt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVariable(TVariable node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstant(TConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInit(TInit node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMultiply(TMultiply node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftParenthesis(TLeftParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightParenthesis(TRightParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftBracket(TLeftBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightBracket(TRightBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftCurlyBrace(TLeftCurlyBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightCurlyBrace(TRightCurlyBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThan(TLessThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThan(TGreaterThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThanEqual(TLessThanEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThanEqual(TGreaterThanEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquivalance(TEquivalance node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotEqual(TNotEqual node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetMethod() != null)
        {
            node.GetMethod().Apply(this);
        }
        if(node.GetMainMethod() != null)
        {
            node.GetMainMethod().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMainMethod(AMainMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainMethod(AMainMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainMethod(AMainMethod node)
    {
        InAMainMethod(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        OutAMainMethod(node);
    }
    public virtual void InAMethodRecurseMethod(AMethodRecurseMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodRecurseMethod(AMethodRecurseMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodRecurseMethod(AMethodRecurseMethod node)
    {
        InAMethodRecurseMethod(node);
        if(node.GetMethod() != null)
        {
            node.GetMethod().Apply(this);
        }
        if(node.GetMethodDeclare() != null)
        {
            node.GetMethodDeclare().Apply(this);
        }
        OutAMethodRecurseMethod(node);
    }
    public virtual void InANothingMethod(ANothingMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingMethod(ANothingMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingMethod(ANothingMethod node)
    {
        InANothingMethod(node);
        OutANothingMethod(node);
    }
    public virtual void InAConstantinitConstants(AConstantinitConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantinitConstants(AConstantinitConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantinitConstants(AConstantinitConstants node)
    {
        InAConstantinitConstants(node);
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetInitialization() != null)
        {
            node.GetInitialization().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAConstantinitConstants(node);
    }
    public virtual void InANothingConstants(ANothingConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingConstants(ANothingConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingConstants(ANothingConstants node)
    {
        InANothingConstants(node);
        OutANothingConstants(node);
    }
    public virtual void InAIntizationInitialization(AIntizationInitialization node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntizationInitialization(AIntizationInitialization node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntizationInitialization(AIntizationInitialization node)
    {
        InAIntizationInitialization(node);
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        OutAIntizationInitialization(node);
    }
    public virtual void InAFloatizationInitialization(AFloatizationInitialization node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatizationInitialization(AFloatizationInitialization node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatizationInitialization(AFloatizationInitialization node)
    {
        InAFloatizationInitialization(node);
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatizationInitialization(node);
    }
    public virtual void InAFirstList(AFirstList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFirstList(AFirstList node)
    {
        DefaultOut(node);
    }

    public override void CaseAFirstList(AFirstList node)
    {
        InAFirstList(node);
        if(node.GetVardecl() != null)
        {
            node.GetVardecl().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAFirstList(node);
    }
    public virtual void InASecondList(ASecondList node)
    {
        DefaultIn(node);
    }

    public virtual void OutASecondList(ASecondList node)
    {
        DefaultOut(node);
    }

    public override void CaseASecondList(ASecondList node)
    {
        InASecondList(node);
        if(node.GetVarassign() != null)
        {
            node.GetVarassign().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutASecondList(node);
    }
    public virtual void InAThirdList(AThirdList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThirdList(AThirdList node)
    {
        DefaultOut(node);
    }

    public override void CaseAThirdList(AThirdList node)
    {
        InAThirdList(node);
        if(node.GetMethodCall() != null)
        {
            node.GetMethodCall().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAThirdList(node);
    }
    public virtual void InAFourthList(AFourthList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFourthList(AFourthList node)
    {
        DefaultOut(node);
    }

    public override void CaseAFourthList(AFourthList node)
    {
        InAFourthList(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAFourthList(node);
    }
    public virtual void InAWhileList(AWhileList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileList(AWhileList node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileList(AWhileList node)
    {
        InAWhileList(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAWhileList(node);
    }
    public virtual void InAArrayList(AArrayList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayList(AArrayList node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayList(AArrayList node)
    {
        InAArrayList(node);
        if(node.GetArrayCreate() != null)
        {
            node.GetArrayCreate().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        OutAArrayList(node);
    }
    public virtual void InANothingList(ANothingList node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingList(ANothingList node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingList(ANothingList node)
    {
        InANothingList(node);
        OutANothingList(node);
    }
    public virtual void InASide1E1(ASide1E1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1E1(ASide1E1 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1E1(ASide1E1 node)
    {
        InASide1E1(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutASide1E1(node);
    }
    public virtual void InASide2E1(ASide2E1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2E1(ASide2E1 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2E1(ASide2E1 node)
    {
        InASide2E1(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutASide2E1(node);
    }
    public virtual void InASide3E1(ASide3E1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3E1(ASide3E1 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3E1(ASide3E1 node)
    {
        InASide3E1(node);
        if(node.GetE2() != null)
        {
            node.GetE2().Apply(this);
        }
        OutASide3E1(node);
    }
    public virtual void InASide1E2(ASide1E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1E2(ASide1E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1E2(ASide1E2 node)
    {
        InASide1E2(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutASide1E2(node);
    }
    public virtual void InASide2E2(ASide2E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2E2(ASide2E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2E2(ASide2E2 node)
    {
        InASide2E2(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutASide2E2(node);
    }
    public virtual void InASide3E2(ASide3E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3E2(ASide3E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3E2(ASide3E2 node)
    {
        InASide3E2(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLessThanEqual() != null)
        {
            node.GetLessThanEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutASide3E2(node);
    }
    public virtual void InASide4E2(ASide4E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide4E2(ASide4E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide4E2(ASide4E2 node)
    {
        InASide4E2(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetGreaterThanEqual() != null)
        {
            node.GetGreaterThanEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutASide4E2(node);
    }
    public virtual void InASide5E2(ASide5E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide5E2(ASide5E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide5E2(ASide5E2 node)
    {
        InASide5E2(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetEquivalance() != null)
        {
            node.GetEquivalance().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutASide5E2(node);
    }
    public virtual void InASide6E2(ASide6E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide6E2(ASide6E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide6E2(ASide6E2 node)
    {
        InASide6E2(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutASide6E2(node);
    }
    public virtual void InASide7E2(ASide7E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide7E2(ASide7E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide7E2(ASide7E2 node)
    {
        InASide7E2(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetNotEqual() != null)
        {
            node.GetNotEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutASide7E2(node);
    }
    public virtual void InASide8E2(ASide8E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide8E2(ASide8E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide8E2(ASide8E2 node)
    {
        InASide8E2(node);
        if(node.GetE3() != null)
        {
            node.GetE3().Apply(this);
        }
        OutASide8E2(node);
    }
    public virtual void InASide1E3(ASide1E3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1E3(ASide1E3 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1E3(ASide1E3 node)
    {
        InASide1E3(node);
        if(node.GetE3() != null)
        {
            node.GetE3().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetE4() != null)
        {
            node.GetE4().Apply(this);
        }
        OutASide1E3(node);
    }
    public virtual void InASide2E3(ASide2E3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2E3(ASide2E3 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2E3(ASide2E3 node)
    {
        InASide2E3(node);
        if(node.GetE3() != null)
        {
            node.GetE3().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetE4() != null)
        {
            node.GetE4().Apply(this);
        }
        OutASide2E3(node);
    }
    public virtual void InASide3E3(ASide3E3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3E3(ASide3E3 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3E3(ASide3E3 node)
    {
        InASide3E3(node);
        if(node.GetE4() != null)
        {
            node.GetE4().Apply(this);
        }
        OutASide3E3(node);
    }
    public virtual void InASide1E4(ASide1E4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1E4(ASide1E4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1E4(ASide1E4 node)
    {
        InASide1E4(node);
        if(node.GetE4() != null)
        {
            node.GetE4().Apply(this);
        }
        if(node.GetMultiply() != null)
        {
            node.GetMultiply().Apply(this);
        }
        if(node.GetE5() != null)
        {
            node.GetE5().Apply(this);
        }
        OutASide1E4(node);
    }
    public virtual void InASide2E4(ASide2E4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2E4(ASide2E4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2E4(ASide2E4 node)
    {
        InASide2E4(node);
        if(node.GetE4() != null)
        {
            node.GetE4().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetE5() != null)
        {
            node.GetE5().Apply(this);
        }
        OutASide2E4(node);
    }
    public virtual void InASide3E4(ASide3E4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3E4(ASide3E4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3E4(ASide3E4 node)
    {
        InASide3E4(node);
        if(node.GetE5() != null)
        {
            node.GetE5().Apply(this);
        }
        OutASide3E4(node);
    }
    public virtual void InASide1E5(ASide1E5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1E5(ASide1E5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1E5(ASide1E5 node)
    {
        InASide1E5(node);
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        OutASide1E5(node);
    }
    public virtual void InASide2E5(ASide2E5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2E5(ASide2E5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2E5(ASide2E5 node)
    {
        InASide2E5(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutASide2E5(node);
    }
    public virtual void InASide3E5(ASide3E5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3E5(ASide3E5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3E5(ASide3E5 node)
    {
        InASide3E5(node);
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        OutASide3E5(node);
    }
    public virtual void InASide4E5(ASide4E5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide4E5(ASide4E5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide4E5(ASide4E5 node)
    {
        InASide4E5(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutASide4E5(node);
    }
    public virtual void InASide5E5(ASide5E5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide5E5(ASide5E5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide5E5(ASide5E5 node)
    {
        InASide5E5(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        OutASide5E5(node);
    }
    public virtual void InASide1Vardecl(ASide1Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1Vardecl(ASide1Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1Vardecl(ASide1Vardecl node)
    {
        InASide1Vardecl(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutASide1Vardecl(node);
    }
    public virtual void InASide2Vardecl(ASide2Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2Vardecl(ASide2Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2Vardecl(ASide2Vardecl node)
    {
        InASide2Vardecl(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutASide2Vardecl(node);
    }
    public virtual void InASide3Vardecl(ASide3Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3Vardecl(ASide3Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3Vardecl(ASide3Vardecl node)
    {
        InASide3Vardecl(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutASide3Vardecl(node);
    }
    public virtual void InASide5Vardecl(ASide5Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide5Vardecl(ASide5Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide5Vardecl(ASide5Vardecl node)
    {
        InASide5Vardecl(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutASide5Vardecl(node);
    }
    public virtual void InASide6Vardecl(ASide6Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide6Vardecl(ASide6Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide6Vardecl(ASide6Vardecl node)
    {
        InASide6Vardecl(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutASide6Vardecl(node);
    }
    public virtual void InASide7Vardecl(ASide7Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide7Vardecl(ASide7Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide7Vardecl(ASide7Vardecl node)
    {
        InASide7Vardecl(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutASide7Vardecl(node);
    }
    public virtual void InASide1Varassign(ASide1Varassign node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1Varassign(ASide1Varassign node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1Varassign(ASide1Varassign node)
    {
        InASide1Varassign(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutASide1Varassign(node);
    }
    public virtual void InAPublicStaticMethodDeclare(APublicStaticMethodDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPublicStaticMethodDeclare(APublicStaticMethodDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAPublicStaticMethodDeclare(APublicStaticMethodDeclare node)
    {
        InAPublicStaticMethodDeclare(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        OutAPublicStaticMethodDeclare(node);
    }
    public virtual void InAPrivateStaticMethodDeclare(APrivateStaticMethodDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPrivateStaticMethodDeclare(APrivateStaticMethodDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAPrivateStaticMethodDeclare(APrivateStaticMethodDeclare node)
    {
        InAPrivateStaticMethodDeclare(node);
        if(node.GetPrivate() != null)
        {
            node.GetPrivate().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        OutAPrivateStaticMethodDeclare(node);
    }
    public virtual void InAPublicMethodDeclare(APublicMethodDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPublicMethodDeclare(APublicMethodDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAPublicMethodDeclare(APublicMethodDeclare node)
    {
        InAPublicMethodDeclare(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        OutAPublicMethodDeclare(node);
    }
    public virtual void InAPrivateMethodDeclare(APrivateMethodDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPrivateMethodDeclare(APrivateMethodDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAPrivateMethodDeclare(APrivateMethodDeclare node)
    {
        InAPrivateMethodDeclare(node);
        if(node.GetPrivate() != null)
        {
            node.GetPrivate().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        OutAPrivateMethodDeclare(node);
    }
    public virtual void InAParamsFormalParams(AParamsFormalParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsFormalParams(AParamsFormalParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsFormalParams(AParamsFormalParams node)
    {
        InAParamsFormalParams(node);
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetContent() != null)
        {
            node.GetContent().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        OutAParamsFormalParams(node);
    }
    public virtual void InANoParamsFormalParams(ANoParamsFormalParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParamsFormalParams(ANoParamsFormalParams node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParamsFormalParams(ANoParamsFormalParams node)
    {
        InANoParamsFormalParams(node);
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        OutANoParamsFormalParams(node);
    }
    public virtual void InATwoPartsContent(ATwoPartsContent node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoPartsContent(ATwoPartsContent node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoPartsContent(ATwoPartsContent node)
    {
        InATwoPartsContent(node);
        if(node.GetContent() != null)
        {
            node.GetContent().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutATwoPartsContent(node);
    }
    public virtual void InAOnePartContent(AOnePartContent node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOnePartContent(AOnePartContent node)
    {
        DefaultOut(node);
    }

    public override void CaseAOnePartContent(AOnePartContent node)
    {
        InAOnePartContent(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutAOnePartContent(node);
    }
    public virtual void InAMethodCall(AMethodCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCall(AMethodCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCall(AMethodCall node)
    {
        InAMethodCall(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetActualParams() != null)
        {
            node.GetActualParams().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAMethodCall(node);
    }
    public virtual void InAParamsActualParams(AParamsActualParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsActualParams(AParamsActualParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsActualParams(AParamsActualParams node)
    {
        InAParamsActualParams(node);
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        OutAParamsActualParams(node);
    }
    public virtual void InANoParamsActualParams(ANoParamsActualParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParamsActualParams(ANoParamsActualParams node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParamsActualParams(ANoParamsActualParams node)
    {
        InANoParamsActualParams(node);
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        OutANoParamsActualParams(node);
    }
    public virtual void InATwoPartsStringExpression(ATwoPartsStringExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoPartsStringExpression(ATwoPartsStringExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoPartsStringExpression(ATwoPartsStringExpression node)
    {
        InATwoPartsStringExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutATwoPartsStringExpression(node);
    }
    public virtual void InATwoPartsBooleanExpression(ATwoPartsBooleanExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoPartsBooleanExpression(ATwoPartsBooleanExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoPartsBooleanExpression(ATwoPartsBooleanExpression node)
    {
        InATwoPartsBooleanExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        OutATwoPartsBooleanExpression(node);
    }
    public virtual void InABaseStringExpression(ABaseStringExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABaseStringExpression(ABaseStringExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABaseStringExpression(ABaseStringExpression node)
    {
        InABaseStringExpression(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutABaseStringExpression(node);
    }
    public virtual void InABaseBooleanExpression(ABaseBooleanExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABaseBooleanExpression(ABaseBooleanExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABaseBooleanExpression(ABaseBooleanExpression node)
    {
        InABaseBooleanExpression(node);
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        OutABaseBooleanExpression(node);
    }
    public virtual void InASide1IfStatement(ASide1IfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1IfStatement(ASide1IfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1IfStatement(ASide1IfStatement node)
    {
        InASide1IfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetIfLeftCurl() != null)
        {
            node.GetIfLeftCurl().Apply(this);
        }
        if(node.GetIfList() != null)
        {
            node.GetIfList().Apply(this);
        }
        if(node.GetIfRightCurl() != null)
        {
            node.GetIfRightCurl().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetElseLeftCurl() != null)
        {
            node.GetElseLeftCurl().Apply(this);
        }
        if(node.GetElseList() != null)
        {
            node.GetElseList().Apply(this);
        }
        if(node.GetElseRightCurl() != null)
        {
            node.GetElseRightCurl().Apply(this);
        }
        OutASide1IfStatement(node);
    }
    public virtual void InASide2IfStatement(ASide2IfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2IfStatement(ASide2IfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2IfStatement(ASide2IfStatement node)
    {
        InASide2IfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        OutASide2IfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAArrayCreate(AArrayCreate node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayCreate(AArrayCreate node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayCreate(AArrayCreate node)
    {
        InAArrayCreate(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetDeclareLb() != null)
        {
            node.GetDeclareLb().Apply(this);
        }
        if(node.GetDeclareRb() != null)
        {
            node.GetDeclareRb().Apply(this);
        }
        if(node.GetNameOfArray() != null)
        {
            node.GetNameOfArray().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetNew() != null)
        {
            node.GetNew().Apply(this);
        }
        if(node.GetSameType() != null)
        {
            node.GetSameType().Apply(this);
        }
        if(node.GetCreateLb() != null)
        {
            node.GetCreateLb().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetCreateRb() != null)
        {
            node.GetCreateRb().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAArrayCreate(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainMethod() != null)
        {
            node.GetMainMethod().Apply(this);
        }
        if(node.GetMethod() != null)
        {
            node.GetMethod().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMainMethod(AMainMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainMethod(AMainMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainMethod(AMainMethod node)
    {
        InAMainMethod(node);
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainMethod(node);
    }
    public virtual void InAMethodRecurseMethod(AMethodRecurseMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodRecurseMethod(AMethodRecurseMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodRecurseMethod(AMethodRecurseMethod node)
    {
        InAMethodRecurseMethod(node);
        if(node.GetMethodDeclare() != null)
        {
            node.GetMethodDeclare().Apply(this);
        }
        if(node.GetMethod() != null)
        {
            node.GetMethod().Apply(this);
        }
        OutAMethodRecurseMethod(node);
    }
    public virtual void InANothingMethod(ANothingMethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingMethod(ANothingMethod node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingMethod(ANothingMethod node)
    {
        InANothingMethod(node);
        OutANothingMethod(node);
    }
    public virtual void InAConstantinitConstants(AConstantinitConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantinitConstants(AConstantinitConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantinitConstants(AConstantinitConstants node)
    {
        InAConstantinitConstants(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetInitialization() != null)
        {
            node.GetInitialization().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        OutAConstantinitConstants(node);
    }
    public virtual void InANothingConstants(ANothingConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingConstants(ANothingConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingConstants(ANothingConstants node)
    {
        InANothingConstants(node);
        OutANothingConstants(node);
    }
    public virtual void InAIntizationInitialization(AIntizationInitialization node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntizationInitialization(AIntizationInitialization node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntizationInitialization(AIntizationInitialization node)
    {
        InAIntizationInitialization(node);
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        OutAIntizationInitialization(node);
    }
    public virtual void InAFloatizationInitialization(AFloatizationInitialization node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatizationInitialization(AFloatizationInitialization node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatizationInitialization(AFloatizationInitialization node)
    {
        InAFloatizationInitialization(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetInit() != null)
        {
            node.GetInit().Apply(this);
        }
        OutAFloatizationInitialization(node);
    }
    public virtual void InAFirstList(AFirstList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFirstList(AFirstList node)
    {
        DefaultOut(node);
    }

    public override void CaseAFirstList(AFirstList node)
    {
        InAFirstList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetVardecl() != null)
        {
            node.GetVardecl().Apply(this);
        }
        OutAFirstList(node);
    }
    public virtual void InASecondList(ASecondList node)
    {
        DefaultIn(node);
    }

    public virtual void OutASecondList(ASecondList node)
    {
        DefaultOut(node);
    }

    public override void CaseASecondList(ASecondList node)
    {
        InASecondList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetVarassign() != null)
        {
            node.GetVarassign().Apply(this);
        }
        OutASecondList(node);
    }
    public virtual void InAThirdList(AThirdList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThirdList(AThirdList node)
    {
        DefaultOut(node);
    }

    public override void CaseAThirdList(AThirdList node)
    {
        InAThirdList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetMethodCall() != null)
        {
            node.GetMethodCall().Apply(this);
        }
        OutAThirdList(node);
    }
    public virtual void InAFourthList(AFourthList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFourthList(AFourthList node)
    {
        DefaultOut(node);
    }

    public override void CaseAFourthList(AFourthList node)
    {
        InAFourthList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAFourthList(node);
    }
    public virtual void InAWhileList(AWhileList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileList(AWhileList node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileList(AWhileList node)
    {
        InAWhileList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileList(node);
    }
    public virtual void InAArrayList(AArrayList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayList(AArrayList node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayList(AArrayList node)
    {
        InAArrayList(node);
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetArrayCreate() != null)
        {
            node.GetArrayCreate().Apply(this);
        }
        OutAArrayList(node);
    }
    public virtual void InANothingList(ANothingList node)
    {
        DefaultIn(node);
    }

    public virtual void OutANothingList(ANothingList node)
    {
        DefaultOut(node);
    }

    public override void CaseANothingList(ANothingList node)
    {
        InANothingList(node);
        OutANothingList(node);
    }
    public virtual void InASide1E1(ASide1E1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1E1(ASide1E1 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1E1(ASide1E1 node)
    {
        InASide1E1(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide1E1(node);
    }
    public virtual void InASide2E1(ASide2E1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2E1(ASide2E1 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2E1(ASide2E1 node)
    {
        InASide2E1(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide2E1(node);
    }
    public virtual void InASide3E1(ASide3E1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3E1(ASide3E1 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3E1(ASide3E1 node)
    {
        InASide3E1(node);
        if(node.GetE2() != null)
        {
            node.GetE2().Apply(this);
        }
        OutASide3E1(node);
    }
    public virtual void InASide1E2(ASide1E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1E2(ASide1E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1E2(ASide1E2 node)
    {
        InASide1E2(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide1E2(node);
    }
    public virtual void InASide2E2(ASide2E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2E2(ASide2E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2E2(ASide2E2 node)
    {
        InASide2E2(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide2E2(node);
    }
    public virtual void InASide3E2(ASide3E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3E2(ASide3E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3E2(ASide3E2 node)
    {
        InASide3E2(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLessThanEqual() != null)
        {
            node.GetLessThanEqual().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide3E2(node);
    }
    public virtual void InASide4E2(ASide4E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide4E2(ASide4E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide4E2(ASide4E2 node)
    {
        InASide4E2(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetGreaterThanEqual() != null)
        {
            node.GetGreaterThanEqual().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide4E2(node);
    }
    public virtual void InASide5E2(ASide5E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide5E2(ASide5E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide5E2(ASide5E2 node)
    {
        InASide5E2(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetEquivalance() != null)
        {
            node.GetEquivalance().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide5E2(node);
    }
    public virtual void InASide6E2(ASide6E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide6E2(ASide6E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide6E2(ASide6E2 node)
    {
        InASide6E2(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide6E2(node);
    }
    public virtual void InASide7E2(ASide7E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide7E2(ASide7E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide7E2(ASide7E2 node)
    {
        InASide7E2(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetNotEqual() != null)
        {
            node.GetNotEqual().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide7E2(node);
    }
    public virtual void InASide8E2(ASide8E2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide8E2(ASide8E2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide8E2(ASide8E2 node)
    {
        InASide8E2(node);
        if(node.GetE3() != null)
        {
            node.GetE3().Apply(this);
        }
        OutASide8E2(node);
    }
    public virtual void InASide1E3(ASide1E3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1E3(ASide1E3 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1E3(ASide1E3 node)
    {
        InASide1E3(node);
        if(node.GetE4() != null)
        {
            node.GetE4().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetE3() != null)
        {
            node.GetE3().Apply(this);
        }
        OutASide1E3(node);
    }
    public virtual void InASide2E3(ASide2E3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2E3(ASide2E3 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2E3(ASide2E3 node)
    {
        InASide2E3(node);
        if(node.GetE4() != null)
        {
            node.GetE4().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetE3() != null)
        {
            node.GetE3().Apply(this);
        }
        OutASide2E3(node);
    }
    public virtual void InASide3E3(ASide3E3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3E3(ASide3E3 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3E3(ASide3E3 node)
    {
        InASide3E3(node);
        if(node.GetE4() != null)
        {
            node.GetE4().Apply(this);
        }
        OutASide3E3(node);
    }
    public virtual void InASide1E4(ASide1E4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1E4(ASide1E4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1E4(ASide1E4 node)
    {
        InASide1E4(node);
        if(node.GetE5() != null)
        {
            node.GetE5().Apply(this);
        }
        if(node.GetMultiply() != null)
        {
            node.GetMultiply().Apply(this);
        }
        if(node.GetE4() != null)
        {
            node.GetE4().Apply(this);
        }
        OutASide1E4(node);
    }
    public virtual void InASide2E4(ASide2E4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2E4(ASide2E4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2E4(ASide2E4 node)
    {
        InASide2E4(node);
        if(node.GetE5() != null)
        {
            node.GetE5().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetE4() != null)
        {
            node.GetE4().Apply(this);
        }
        OutASide2E4(node);
    }
    public virtual void InASide3E4(ASide3E4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3E4(ASide3E4 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3E4(ASide3E4 node)
    {
        InASide3E4(node);
        if(node.GetE5() != null)
        {
            node.GetE5().Apply(this);
        }
        OutASide3E4(node);
    }
    public virtual void InASide1E5(ASide1E5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1E5(ASide1E5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1E5(ASide1E5 node)
    {
        InASide1E5(node);
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        OutASide1E5(node);
    }
    public virtual void InASide2E5(ASide2E5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2E5(ASide2E5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2E5(ASide2E5 node)
    {
        InASide2E5(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutASide2E5(node);
    }
    public virtual void InASide3E5(ASide3E5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3E5(ASide3E5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3E5(ASide3E5 node)
    {
        InASide3E5(node);
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        OutASide3E5(node);
    }
    public virtual void InASide4E5(ASide4E5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide4E5(ASide4E5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide4E5(ASide4E5 node)
    {
        InASide4E5(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutASide4E5(node);
    }
    public virtual void InASide5E5(ASide5E5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide5E5(ASide5E5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASide5E5(ASide5E5 node)
    {
        InASide5E5(node);
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutASide5E5(node);
    }
    public virtual void InASide1Vardecl(ASide1Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1Vardecl(ASide1Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1Vardecl(ASide1Vardecl node)
    {
        InASide1Vardecl(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide1Vardecl(node);
    }
    public virtual void InASide2Vardecl(ASide2Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2Vardecl(ASide2Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2Vardecl(ASide2Vardecl node)
    {
        InASide2Vardecl(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide2Vardecl(node);
    }
    public virtual void InASide3Vardecl(ASide3Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3Vardecl(ASide3Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3Vardecl(ASide3Vardecl node)
    {
        InASide3Vardecl(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide3Vardecl(node);
    }
    public virtual void InASide5Vardecl(ASide5Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide5Vardecl(ASide5Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide5Vardecl(ASide5Vardecl node)
    {
        InASide5Vardecl(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide5Vardecl(node);
    }
    public virtual void InASide6Vardecl(ASide6Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide6Vardecl(ASide6Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide6Vardecl(ASide6Vardecl node)
    {
        InASide6Vardecl(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide6Vardecl(node);
    }
    public virtual void InASide7Vardecl(ASide7Vardecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide7Vardecl(ASide7Vardecl node)
    {
        DefaultOut(node);
    }

    public override void CaseASide7Vardecl(ASide7Vardecl node)
    {
        InASide7Vardecl(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutASide7Vardecl(node);
    }
    public virtual void InASide1Varassign(ASide1Varassign node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1Varassign(ASide1Varassign node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1Varassign(ASide1Varassign node)
    {
        InASide1Varassign(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutASide1Varassign(node);
    }
    public virtual void InAPublicStaticMethodDeclare(APublicStaticMethodDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPublicStaticMethodDeclare(APublicStaticMethodDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAPublicStaticMethodDeclare(APublicStaticMethodDeclare node)
    {
        InAPublicStaticMethodDeclare(node);
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutAPublicStaticMethodDeclare(node);
    }
    public virtual void InAPrivateStaticMethodDeclare(APrivateStaticMethodDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPrivateStaticMethodDeclare(APrivateStaticMethodDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAPrivateStaticMethodDeclare(APrivateStaticMethodDeclare node)
    {
        InAPrivateStaticMethodDeclare(node);
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetPrivate() != null)
        {
            node.GetPrivate().Apply(this);
        }
        OutAPrivateStaticMethodDeclare(node);
    }
    public virtual void InAPublicMethodDeclare(APublicMethodDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPublicMethodDeclare(APublicMethodDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAPublicMethodDeclare(APublicMethodDeclare node)
    {
        InAPublicMethodDeclare(node);
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutAPublicMethodDeclare(node);
    }
    public virtual void InAPrivateMethodDeclare(APrivateMethodDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPrivateMethodDeclare(APrivateMethodDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAPrivateMethodDeclare(APrivateMethodDeclare node)
    {
        InAPrivateMethodDeclare(node);
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetPrivate() != null)
        {
            node.GetPrivate().Apply(this);
        }
        OutAPrivateMethodDeclare(node);
    }
    public virtual void InAParamsFormalParams(AParamsFormalParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsFormalParams(AParamsFormalParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsFormalParams(AParamsFormalParams node)
    {
        InAParamsFormalParams(node);
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetContent() != null)
        {
            node.GetContent().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        OutAParamsFormalParams(node);
    }
    public virtual void InANoParamsFormalParams(ANoParamsFormalParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParamsFormalParams(ANoParamsFormalParams node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParamsFormalParams(ANoParamsFormalParams node)
    {
        InANoParamsFormalParams(node);
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        OutANoParamsFormalParams(node);
    }
    public virtual void InATwoPartsContent(ATwoPartsContent node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoPartsContent(ATwoPartsContent node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoPartsContent(ATwoPartsContent node)
    {
        InATwoPartsContent(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetContent() != null)
        {
            node.GetContent().Apply(this);
        }
        OutATwoPartsContent(node);
    }
    public virtual void InAOnePartContent(AOnePartContent node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOnePartContent(AOnePartContent node)
    {
        DefaultOut(node);
    }

    public override void CaseAOnePartContent(AOnePartContent node)
    {
        InAOnePartContent(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutAOnePartContent(node);
    }
    public virtual void InAMethodCall(AMethodCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCall(AMethodCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCall(AMethodCall node)
    {
        InAMethodCall(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetActualParams() != null)
        {
            node.GetActualParams().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAMethodCall(node);
    }
    public virtual void InAParamsActualParams(AParamsActualParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsActualParams(AParamsActualParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsActualParams(AParamsActualParams node)
    {
        InAParamsActualParams(node);
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        OutAParamsActualParams(node);
    }
    public virtual void InANoParamsActualParams(ANoParamsActualParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParamsActualParams(ANoParamsActualParams node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParamsActualParams(ANoParamsActualParams node)
    {
        InANoParamsActualParams(node);
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        OutANoParamsActualParams(node);
    }
    public virtual void InATwoPartsStringExpression(ATwoPartsStringExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoPartsStringExpression(ATwoPartsStringExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoPartsStringExpression(ATwoPartsStringExpression node)
    {
        InATwoPartsStringExpression(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutATwoPartsStringExpression(node);
    }
    public virtual void InATwoPartsBooleanExpression(ATwoPartsBooleanExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoPartsBooleanExpression(ATwoPartsBooleanExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoPartsBooleanExpression(ATwoPartsBooleanExpression node)
    {
        InATwoPartsBooleanExpression(node);
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutATwoPartsBooleanExpression(node);
    }
    public virtual void InABaseStringExpression(ABaseStringExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABaseStringExpression(ABaseStringExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABaseStringExpression(ABaseStringExpression node)
    {
        InABaseStringExpression(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutABaseStringExpression(node);
    }
    public virtual void InABaseBooleanExpression(ABaseBooleanExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABaseBooleanExpression(ABaseBooleanExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABaseBooleanExpression(ABaseBooleanExpression node)
    {
        InABaseBooleanExpression(node);
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        OutABaseBooleanExpression(node);
    }
    public virtual void InASide1IfStatement(ASide1IfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1IfStatement(ASide1IfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1IfStatement(ASide1IfStatement node)
    {
        InASide1IfStatement(node);
        if(node.GetElseRightCurl() != null)
        {
            node.GetElseRightCurl().Apply(this);
        }
        if(node.GetElseList() != null)
        {
            node.GetElseList().Apply(this);
        }
        if(node.GetElseLeftCurl() != null)
        {
            node.GetElseLeftCurl().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetIfRightCurl() != null)
        {
            node.GetIfRightCurl().Apply(this);
        }
        if(node.GetIfList() != null)
        {
            node.GetIfList().Apply(this);
        }
        if(node.GetIfLeftCurl() != null)
        {
            node.GetIfLeftCurl().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutASide1IfStatement(node);
    }
    public virtual void InASide2IfStatement(ASide2IfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2IfStatement(ASide2IfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2IfStatement(ASide2IfStatement node)
    {
        InASide2IfStatement(node);
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutASide2IfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetRightCurlyBrace() != null)
        {
            node.GetRightCurlyBrace().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetLeftCurlyBrace() != null)
        {
            node.GetLeftCurlyBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAArrayCreate(AArrayCreate node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayCreate(AArrayCreate node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayCreate(AArrayCreate node)
    {
        InAArrayCreate(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetCreateRb() != null)
        {
            node.GetCreateRb().Apply(this);
        }
        if(node.GetE1() != null)
        {
            node.GetE1().Apply(this);
        }
        if(node.GetCreateLb() != null)
        {
            node.GetCreateLb().Apply(this);
        }
        if(node.GetSameType() != null)
        {
            node.GetSameType().Apply(this);
        }
        if(node.GetNew() != null)
        {
            node.GetNew().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetNameOfArray() != null)
        {
            node.GetNameOfArray().Apply(this);
        }
        if(node.GetDeclareRb() != null)
        {
            node.GetDeclareRb().Apply(this);
        }
        if(node.GetDeclareLb() != null)
        {
            node.GetDeclareLb().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAArrayCreate(node);
    }
}
} // namespace comp5210.analysis
