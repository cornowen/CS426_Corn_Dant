/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  comp5210.analysis;

namespace comp5210.node {

public abstract class PProgram : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class PInitialization : Node
{
}

public abstract class PMainMethod : Node
{
}

public abstract class PMethods : Node
{
}

public abstract class PList : Node
{
}

public abstract class PE1 : Node
{
}

public abstract class PE2 : Node
{
}

public abstract class PE3 : Node
{
}

public abstract class PE4 : Node
{
}

public abstract class PE5 : Node
{
}

public abstract class PVardecl : Node
{
}

public abstract class PVarassign : Node
{
}

public abstract class PMethodDeclare : Node
{
}

public abstract class PFormalParams : Node
{
}

public abstract class PContent : Node
{
}

public abstract class PMethodCall : Node
{
}

public abstract class PActualParams : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PIfStatement : Node
{
}

public abstract class PWhileStatement : Node
{
}

public abstract class PArrayCreate : Node
{
}


public sealed class AProgram : PProgram
{
    private PMethod _method_;
    private PMainMethod _main_method_;

    public AProgram ()
    {
    }

    public AProgram (
            PMethod _method_,
            PMainMethod _main_method_
    )
    {
        SetMethod (_method_);
        SetMainMethod (_main_method_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PMethod)CloneNode (_method_),
            (PMainMethod)CloneNode (_main_method_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PMethod GetMethod ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PMethods GetMethods ()
    {
        return _methods_;
    }

    public void SetMethods (PMethods node)
    {
        if(_methods_ != null)
        {
            _methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_ = node;
    }
    public PMainMethod GetMainMethod ()
    {
        return _main_method_;
    }

    public void SetMainMethod (PMainMethod node)
    {
        if(_main_method_ != null)
        {
            _main_method_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_method_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_method_)
            + ToString (_main_method_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _method_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _methods_ == child )
        {
            _methods_ = null;
            return;
        }
        if ( _main_method_ == child )
        {
            _main_method_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _method_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _methods_ == oldChild )
        {
            SetMethods ((PMethods) newChild);
            return;
        }
        if ( _main_method_ == oldChild )
        {
            SetMainMethod ((PMainMethod) newChild);
            return;
        }
    }

}
public sealed class AConstantinitConstants : PConstants
{
    private PConstants _constants_;
    private TConstant _constant_;
    private PE1 _one_;
    private PE1 _two_;
    private PInitialization _initialization_;
    private TSemicolon _semicolon_;

    public AConstantinitConstants ()
    {
    }

    public AConstantinitConstants (
            PConstants _constants_,
            TConstant _constant_,
            PE1 _one_,
            PE1 _two_,
            PInitialization _initialization_,
            TSemicolon _semicolon_
    )
    {
        SetConstants (_constants_);
        SetConstant (_constant_);
        SetOne (_one_);
        SetTwo (_two_);
        SetInitialization (_initialization_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AConstantinitConstants (
            (PConstants)CloneNode (_constants_),
            (TConstant)CloneNode (_constant_),
            (PE1)CloneNode (_one_),
            (PE1)CloneNode (_two_),
            (PInitialization)CloneNode (_initialization_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantinitConstants(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public TConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (TConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public PE1 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PE1 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public PE1 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PE1 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }
    public PInitialization GetInitialization ()
    {
        return _initialization_;
    }

    public void SetInitialization (PInitialization node)
    {
        if(_initialization_ != null)
        {
            _initialization_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _initialization_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_constant_)
            + ToString (_one_)
            + ToString (_two_)
            + ToString (_initialization_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
        if ( _initialization_ == child )
        {
            _initialization_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _constant_ == oldChild )
        {
            SetConstant ((TConstant) newChild);
            return;
        }
        if ( _one_ == oldChild )
        {
            SetOne ((PE1) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PE1) newChild);
            return;
        }
        if ( _initialization_ == oldChild )
        {
            SetInitialization ((PInitialization) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ANothingConstants : PConstants
{


    public ANothingConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ANothingConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANothingConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIntizationInitialization : PInitialization
{
    private PMethodDeclare _method_declare_;
    private PMethod _method_;

    public AIntizationInitialization ()
    {
    }

    public AMethodRecurseMethod (
            PMethodDeclare _method_declare_,
            PMethod _method_
    )
    {
        SetMethodDeclare (_method_declare_);
        SetMethod (_method_);
    }

    public override Object Clone()
    {
        return new AMethodRecurseMethod (
            (PMethodDeclare)CloneNode (_method_declare_),
            (PMethod)CloneNode (_method_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntizationInitialization(this);
    }

    public PMethodDeclare GetMethodDeclare ()
    {
        return _method_declare_;
    }

    public void SetMethodDeclare (PMethodDeclare node)
    {
        if(_method_declare_ != null)
        {
            _method_declare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_declare_ = node;
    }
    public PMethod GetMethod ()
    {
        return _method_;
    }

    public void SetMethod (PMethod node)
    {
        if(_method_ != null)
        {
            _method_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_method_declare_)
            + ToString (_method_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _method_declare_ == child )
        {
            _method_declare_ = null;
            return;
        }
        if ( _method_ == child )
        {
            _method_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _method_declare_ == oldChild )
        {
            SetMethodDeclare ((PMethodDeclare) newChild);
            return;
        }
        if ( _method_ == oldChild )
        {
            SetMethod ((PMethod) newChild);
            return;
        }
    }

}
public sealed class AFloatizationInitialization : PInitialization
{
    private TInit _init_;
    private TFloat _float_;

    public AFloatizationInitialization ()
    {
    }

    public AFloatizationInitialization (
            TInit _init_,
            TFloat _float_
    )
    {
        SetInit (_init_);
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatizationInitialization (
            (TInit)CloneNode (_init_),
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatizationInitialization(this);
    }

    public TInit GetInit ()
    {
        return _init_;
    }

    public void SetInit (TInit node)
    {
        if(_init_ != null)
        {
            _init_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _init_ = node;
    }
    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
    }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_init_)
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _init_ == child )
        {
            _init_ = null;
            return;
    }
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _init_ == oldChild )
        {
            SetInit ((TInit) newChild);
            return;
    }
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AMainMethod : PMainMethod
{
    private PConstants _constants_;
    private TConstant _constant_;
    private PE1 _one_;
    private PE1 _two_;
    private PInitialization _initialization_;

    public AMainMethod ()
    {
    }

    public AConstantinitConstants (
            PConstants _constants_,
            TConstant _constant_,
            PE1 _one_,
            PE1 _two_,
            PInitialization _initialization_
    )
    {
        SetConstants (_constants_);
        SetConstant (_constant_);
        SetOne (_one_);
        SetTwo (_two_);
        SetInitialization (_initialization_);
    }

    public override Object Clone()
    {
        return new AConstantinitConstants (
            (PConstants)CloneNode (_constants_),
            (TConstant)CloneNode (_constant_),
            (PE1)CloneNode (_one_),
            (PE1)CloneNode (_two_),
            (PInitialization)CloneNode (_initialization_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainMethod(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public TConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (TConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TLeftCurlyBrace GetLeftCurlyBrace ()
    {
        return _left_curly_brace_;
    }

    public void SetLeftCurlyBrace (TLeftCurlyBrace node)
    {
        if(_left_curly_brace_ != null)
        {
            _left_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public void SetRightCurlyBrace (TRightCurlyBrace node)
    {
        if(_right_curly_brace_ != null)
        {
            _right_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_constant_)
            + ToString (_one_)
            + ToString (_two_)
            + ToString (_initialization_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _left_curly_brace_ == child )
        {
            _left_curly_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _constant_ == oldChild )
        {
            SetConstant ((TConstant) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _left_curly_brace_ == oldChild )
        {
            SetLeftCurlyBrace ((TLeftCurlyBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class ANothingConstants : PConstants
{


    public ANothingConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ANothingConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANothingConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
            SetRightCurlyBrace ((TRightCurlyBrace) newChild);
            return;
    }
    }

}
public sealed class AMethodRecurseMethods : PMethods
{
    private PMethodDeclare _method_declare_;
    private PMethods _methods_;

    public AMethodRecurseMethods ()
    {
    }

    public AMethodRecurseMethods (
            PMethodDeclare _method_declare_,
            PMethods _methods_
    )
    {
        SetMethodDeclare (_method_declare_);
        SetMethods (_methods_);
    }

    public override Object Clone()
    {
        return new AMethodRecurseMethods (
            (PMethodDeclare)CloneNode (_method_declare_),
            (PMethods)CloneNode (_methods_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodRecurseMethods(this);
    }

    public PMethodDeclare GetMethodDeclare ()
    {
        return _method_declare_;
    }

    public void SetMethodDeclare (PMethodDeclare node)
    {
        if(_method_declare_ != null)
        {
            _method_declare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_declare_ = node;
    }
    public PMethods GetMethods ()
    {
        return _methods_;
    }

    public void SetMethods (PMethods node)
    {
        if(_methods_ != null)
        {
            _methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_method_declare_)
            + ToString (_methods_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _method_declare_ == child )
        {
            _method_declare_ = null;
            return;
        }
        if ( _methods_ == child )
        {
            _methods_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _method_declare_ == oldChild )
        {
            SetMethodDeclare ((PMethodDeclare) newChild);
            return;
        }
        if ( _methods_ == oldChild )
        {
            SetMethods ((PMethods) newChild);
            return;
        }
    }

}
public sealed class ANothingMethods : PMethods
{


    public ANothingMethods (
    )
    {
    }

    public override Object Clone()
    {
        return new ANothingMethods (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANothingMethods(this);
        }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFirstList : PList
{
    private PVardecl _vardecl_;
    private PList _list_;

    public AFirstList ()
    {
    }

    public AFirstList (
            PVardecl _vardecl_,
            PList _list_
    )
    {
        SetVardecl (_vardecl_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AFirstList (
            (PVardecl)CloneNode (_vardecl_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFirstList(this);
    }

    public PVardecl GetVardecl ()
    {
        return _vardecl_;
    }

    public void SetVardecl (PVardecl node)
    {
        if(_vardecl_ != null)
        {
            _vardecl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _vardecl_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_vardecl_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _vardecl_ == child )
        {
            _vardecl_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _vardecl_ == oldChild )
        {
            SetVardecl ((PVardecl) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class ASecondList : PList
{
    private PVarassign _varassign_;
    private PList _list_;

    public ASecondList ()
    {
    }

    public ASecondList (
            PVarassign _varassign_,
            PList _list_
    )
    {
        SetVarassign (_varassign_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new ASecondList (
            (PVarassign)CloneNode (_varassign_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASecondList(this);
    }

    public PVarassign GetVarassign ()
    {
        return _varassign_;
    }

    public void SetVarassign (PVarassign node)
    {
        if(_varassign_ != null)
        {
            _varassign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varassign_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_varassign_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _varassign_ == child )
        {
            _varassign_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _varassign_ == oldChild )
        {
            SetVarassign ((PVarassign) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class AThirdList : PList
{
    private PMethodCall _method_call_;
    private PList _list_;

    public AThirdList ()
    {
    }

    public AThirdList (
            PMethodCall _method_call_,
            PList _list_
    )
    {
        SetMethodCall (_method_call_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AThirdList (
            (PMethodCall)CloneNode (_method_call_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThirdList(this);
    }

    public PMethodCall GetMethodCall ()
    {
        return _method_call_;
    }

    public void SetMethodCall (PMethodCall node)
    {
        if(_method_call_ != null)
        {
            _method_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_call_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_method_call_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _method_call_ == child )
        {
            _method_call_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _method_call_ == oldChild )
        {
            SetMethodCall ((PMethodCall) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class AFourthList : PList
{
    private PIfStatement _if_statement_;
    private PList _list_;

    public AFourthList ()
    {
    }

    public AFourthList (
            PIfStatement _if_statement_,
            PList _list_
    )
    {
        SetIfStatement (_if_statement_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AFourthList (
            (PIfStatement)CloneNode (_if_statement_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFourthList(this);
    }

    public PIfStatement GetIfStatement ()
    {
        return _if_statement_;
    }

    public void SetIfStatement (PIfStatement node)
    {
        if(_if_statement_ != null)
        {
            _if_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statement_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_statement_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_statement_ == child )
        {
            _if_statement_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_statement_ == oldChild )
        {
            SetIfStatement ((PIfStatement) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class AWhileList : PList
{
    private PWhileStatement _while_statement_;
    private PList _list_;

    public AWhileList ()
    {
    }

    public AWhileList (
            PWhileStatement _while_statement_,
            PList _list_
    )
    {
        SetWhileStatement (_while_statement_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AWhileList (
            (PWhileStatement)CloneNode (_while_statement_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileList(this);
    }

    public PWhileStatement GetWhileStatement ()
    {
        return _while_statement_;
    }

    public void SetWhileStatement (PWhileStatement node)
    {
        if(_while_statement_ != null)
        {
            _while_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_statement_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_statement_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_statement_ == child )
        {
            _while_statement_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_statement_ == oldChild )
        {
            SetWhileStatement ((PWhileStatement) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class AArrayList : PList
{
    private PArrayCreate _array_create_;
    private PList _list_;

    public AArrayList ()
    {
    }

    public AArrayList (
            PArrayCreate _array_create_,
            PList _list_
    )
    {
        SetArrayCreate (_array_create_);
        SetList (_list_);
    }

    public override Object Clone()
    {
        return new AArrayList (
            (PArrayCreate)CloneNode (_array_create_),
            (PList)CloneNode (_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayList(this);
    }

    public PArrayCreate GetArrayCreate ()
    {
        return _array_create_;
    }

    public void SetArrayCreate (PArrayCreate node)
    {
        if(_array_create_ != null)
        {
            _array_create_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _array_create_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_array_create_)
            + ToString (_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _array_create_ == child )
        {
            _array_create_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _array_create_ == oldChild )
        {
            SetArrayCreate ((PArrayCreate) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
    }

}
public sealed class ANothingList : PList
{


    public ANothingList (
    )
    {
    }

    public override Object Clone()
    {
        return new ANothingList (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANothingList(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASide1E1 : PE1
{
    private PE2 _one_;
    private TAnd _and_;
    private PE2 _two_;

    public ASide1E1 ()
    {
    }

    public ASide1E1 (
            PE2 _one_,
            TAnd _and_,
            PE2 _two_
    )
    {
        SetOne (_one_);
        SetAnd (_and_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ASide1E1 (
            (PE2)CloneNode (_one_),
            (TAnd)CloneNode (_and_),
            (PE2)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide1E1(this);
    }

    public PE2 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PE2 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PE2 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PE2 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_and_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PE2) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PE2) newChild);
            return;
        }
    }

}
public sealed class ASide2E1 : PE1
{
    private PE2 _one_;
    private TOr _or_;
    private PE2 _two_;

    public ASide2E1 ()
    {
    }

    public ASide2E1 (
            PE2 _one_,
            TOr _or_,
            PE2 _two_
    )
    {
        SetOne (_one_);
        SetOr (_or_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ASide2E1 (
            (PE2)CloneNode (_one_),
            (TOr)CloneNode (_or_),
            (PE2)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide2E1(this);
    }

    public PE2 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PE2 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PE2 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PE2 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_or_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PE2) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PE2) newChild);
            return;
        }
    }

}
public sealed class ASide3E1 : PE1
{
    private PE2 _e2_;

    public ASide3E1 ()
    {
    }

    public ASide3E1 (
            PE2 _e2_
    )
    {
        SetE2 (_e2_);
    }

    public override Object Clone()
    {
        return new ASide3E1 (
            (PE2)CloneNode (_e2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide3E1(this);
    }

    public PE2 GetE2 ()
    {
        return _e2_;
    }

    public void SetE2 (PE2 node)
    {
        if(_e2_ != null)
        {
            _e2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_e2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _e2_ == child )
        {
            _e2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _e2_ == oldChild )
        {
            SetE2 ((PE2) newChild);
            return;
        }
    }

}
public sealed class ASide1E2 : PE2
{
    private PE3 _one_;
    private TLessThan _less_than_;
    private PE3 _two_;

    public ASide1E2 ()
    {
    }

    public ASide1E2 (
            PE3 _one_,
            TLessThan _less_than_,
            PE3 _two_
    )
    {
        SetOne (_one_);
        SetLessThan (_less_than_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ASide1E2 (
            (PE3)CloneNode (_one_),
            (TLessThan)CloneNode (_less_than_),
            (PE3)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide1E2(this);
    }

    public PE3 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PE3 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLessThan GetLessThan ()
    {
        return _less_than_;
    }

    public void SetLessThan (TLessThan node)
    {
        if(_less_than_ != null)
        {
            _less_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_than_ = node;
    }
    public PE3 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PE3 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_less_than_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _less_than_ == child )
        {
            _less_than_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PE3) newChild);
            return;
        }
        if ( _less_than_ == oldChild )
        {
            SetLessThan ((TLessThan) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PE3) newChild);
            return;
        }
    }

}
public sealed class ASide2E2 : PE2
{
    private PE3 _one_;
    private TGreaterThan _greater_than_;
    private PE3 _two_;

    public ASide2E2 ()
    {
    }

    public ASide2E2 (
            PE3 _one_,
            TGreaterThan _greater_than_,
            PE3 _two_
    )
    {
        SetOne (_one_);
        SetGreaterThan (_greater_than_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ASide2E2 (
            (PE3)CloneNode (_one_),
            (TGreaterThan)CloneNode (_greater_than_),
            (PE3)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide2E2(this);
    }

    public PE3 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PE3 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TGreaterThan GetGreaterThan ()
    {
        return _greater_than_;
    }

    public void SetGreaterThan (TGreaterThan node)
    {
        if(_greater_than_ != null)
        {
            _greater_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_than_ = node;
    }
    public PE3 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PE3 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_greater_than_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _greater_than_ == child )
        {
            _greater_than_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PE3) newChild);
            return;
        }
        if ( _greater_than_ == oldChild )
        {
            SetGreaterThan ((TGreaterThan) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PE3) newChild);
            return;
        }
    }

}
public sealed class ASide3E2 : PE2
{
    private PE3 _one_;
    private TLessThanEqual _less_than_equal_;
    private PE3 _two_;

    public ASide3E2 ()
    {
    }

    public ASide3E2 (
            PE3 _one_,
            TLessThanEqual _less_than_equal_,
            PE3 _two_
    )
    {
        SetOne (_one_);
        SetLessThanEqual (_less_than_equal_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ASide3E2 (
            (PE3)CloneNode (_one_),
            (TLessThanEqual)CloneNode (_less_than_equal_),
            (PE3)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide3E2(this);
    }

    public PE3 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PE3 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLessThanEqual GetLessThanEqual ()
    {
        return _less_than_equal_;
    }

    public void SetLessThanEqual (TLessThanEqual node)
    {
        if(_less_than_equal_ != null)
        {
            _less_than_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_than_equal_ = node;
    }
    public PE3 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PE3 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_less_than_equal_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _less_than_equal_ == child )
        {
            _less_than_equal_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PE3) newChild);
            return;
        }
        if ( _less_than_equal_ == oldChild )
        {
            SetLessThanEqual ((TLessThanEqual) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PE3) newChild);
            return;
        }
    }

}
public sealed class ASide4E2 : PE2
{
    private PE3 _one_;
    private TGreaterThanEqual _greater_than_equal_;
    private PE3 _two_;

    public ASide4E2 ()
    {
    }

    public ASide4E2 (
            PE3 _one_,
            TGreaterThanEqual _greater_than_equal_,
            PE3 _two_
    )
    {
        SetOne (_one_);
        SetGreaterThanEqual (_greater_than_equal_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ASide4E2 (
            (PE3)CloneNode (_one_),
            (TGreaterThanEqual)CloneNode (_greater_than_equal_),
            (PE3)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide4E2(this);
    }

    public PE3 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PE3 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TGreaterThanEqual GetGreaterThanEqual ()
    {
        return _greater_than_equal_;
    }

    public void SetGreaterThanEqual (TGreaterThanEqual node)
    {
        if(_greater_than_equal_ != null)
        {
            _greater_than_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_than_equal_ = node;
    }
    public PE3 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PE3 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_greater_than_equal_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _greater_than_equal_ == child )
        {
            _greater_than_equal_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PE3) newChild);
            return;
        }
        if ( _greater_than_equal_ == oldChild )
        {
            SetGreaterThanEqual ((TGreaterThanEqual) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PE3) newChild);
            return;
        }
    }

}
public sealed class ASide5E2 : PE2
{
    private PE3 _one_;
    private TEquivalance _equivalance_;
    private PE3 _two_;

    public ASide5E2 ()
    {
    }

    public ASide5E2 (
            PE3 _one_,
            TEquivalance _equivalance_,
            PE3 _two_
    )
    {
        SetOne (_one_);
        SetEquivalance (_equivalance_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ASide5E2 (
            (PE3)CloneNode (_one_),
            (TEquivalance)CloneNode (_equivalance_),
            (PE3)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide5E2(this);
    }

    public PE3 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PE3 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TEquivalance GetEquivalance ()
    {
        return _equivalance_;
    }

    public void SetEquivalance (TEquivalance node)
    {
        if(_equivalance_ != null)
        {
            _equivalance_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equivalance_ = node;
    }
    public PE3 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PE3 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_equivalance_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _equivalance_ == child )
        {
            _equivalance_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PE3) newChild);
            return;
        }
        if ( _equivalance_ == oldChild )
        {
            SetEquivalance ((TEquivalance) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PE3) newChild);
            return;
        }
    }

}
public sealed class ASide6E2 : PE2
{
    private PE3 _one_;
    private TEqual _equal_;
    private PE3 _two_;

    public ASide6E2 ()
    {
    }

    public ASide6E2 (
            PE3 _one_,
            TEqual _equal_,
            PE3 _two_
    )
    {
        SetOne (_one_);
        SetEqual (_equal_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ASide6E2 (
            (PE3)CloneNode (_one_),
            (TEqual)CloneNode (_equal_),
            (PE3)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide6E2(this);
    }

    public PE3 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PE3 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PE3 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PE3 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_equal_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PE3) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PE3) newChild);
            return;
        }
    }

}
public sealed class ASide7E2 : PE2
{
    private PE3 _one_;
    private TNotEqual _not_equal_;
    private PE3 _two_;

    public ASide7E2 ()
    {
    }

    public ASide7E2 (
            PE3 _one_,
            TNotEqual _not_equal_,
            PE3 _two_
    )
    {
        SetOne (_one_);
        SetNotEqual (_not_equal_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ASide7E2 (
            (PE3)CloneNode (_one_),
            (TNotEqual)CloneNode (_not_equal_),
            (PE3)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide7E2(this);
    }

    public PE3 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PE3 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TNotEqual GetNotEqual ()
    {
        return _not_equal_;
    }

    public void SetNotEqual (TNotEqual node)
    {
        if(_not_equal_ != null)
        {
            _not_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_equal_ = node;
    }
    public PE3 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PE3 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_not_equal_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _not_equal_ == child )
        {
            _not_equal_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PE3) newChild);
            return;
        }
        if ( _not_equal_ == oldChild )
        {
            SetNotEqual ((TNotEqual) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PE3) newChild);
            return;
        }
    }

}
public sealed class ASide8E2 : PE2
{
    private PE3 _e3_;

    public ASide8E2 ()
    {
    }

    public ASide8E2 (
            PE3 _e3_
    )
    {
        SetE3 (_e3_);
    }

    public override Object Clone()
    {
        return new ASide8E2 (
            (PE3)CloneNode (_e3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide8E2(this);
    }

    public PE3 GetE3 ()
    {
        return _e3_;
    }

    public void SetE3 (PE3 node)
    {
        if(_e3_ != null)
        {
            _e3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_e3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _e3_ == child )
        {
            _e3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _e3_ == oldChild )
        {
            SetE3 ((PE3) newChild);
            return;
        }
    }

}
public sealed class ASide1E3 : PE3
{
    private PE3 _e3_;
    private TPlus _plus_;
    private PE4 _e4_;

    public ASide1E3 ()
    {
    }

    public ASide1E3 (
            PE3 _e3_,
            TPlus _plus_,
            PE4 _e4_
    )
    {
        SetE3 (_e3_);
        SetPlus (_plus_);
        SetE4 (_e4_);
    }

    public override Object Clone()
    {
        return new ASide1E3 (
            (PE3)CloneNode (_e3_),
            (TPlus)CloneNode (_plus_),
            (PE4)CloneNode (_e4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide1E3(this);
    }

    public PE3 GetE3 ()
    {
        return _e3_;
    }

    public void SetE3 (PE3 node)
    {
        if(_e3_ != null)
        {
            _e3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e3_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PE4 GetE4 ()
    {
        return _e4_;
    }

    public void SetE4 (PE4 node)
    {
        if(_e4_ != null)
        {
            _e4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_e3_)
            + ToString (_plus_)
            + ToString (_e4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _e3_ == child )
        {
            _e3_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _e4_ == child )
        {
            _e4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _e3_ == oldChild )
        {
            SetE3 ((PE3) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _e4_ == oldChild )
        {
            SetE4 ((PE4) newChild);
            return;
        }
    }

}
public sealed class ASide2E3 : PE3
{
    private PE3 _e3_;
    private TMinus _minus_;
    private PE4 _e4_;

    public ASide2E3 ()
    {
    }

    public ASide2E3 (
            PE3 _e3_,
            TMinus _minus_,
            PE4 _e4_
    )
    {
        SetE3 (_e3_);
        SetMinus (_minus_);
        SetE4 (_e4_);
    }

    public override Object Clone()
    {
        return new ASide2E3 (
            (PE3)CloneNode (_e3_),
            (TMinus)CloneNode (_minus_),
            (PE4)CloneNode (_e4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide2E3(this);
    }

    public PE3 GetE3 ()
    {
        return _e3_;
    }

    public void SetE3 (PE3 node)
    {
        if(_e3_ != null)
        {
            _e3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e3_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PE4 GetE4 ()
    {
        return _e4_;
    }

    public void SetE4 (PE4 node)
    {
        if(_e4_ != null)
        {
            _e4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_e3_)
            + ToString (_minus_)
            + ToString (_e4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _e3_ == child )
        {
            _e3_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _e4_ == child )
        {
            _e4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _e3_ == oldChild )
        {
            SetE3 ((PE3) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _e4_ == oldChild )
        {
            SetE4 ((PE4) newChild);
            return;
        }
    }

}
public sealed class ASide3E3 : PE3
{
    private PE4 _e4_;

    public ASide3E3 ()
    {
    }

    public ASide3E3 (
            PE4 _e4_
    )
    {
        SetE4 (_e4_);
    }

    public override Object Clone()
    {
        return new ASide3E3 (
            (PE4)CloneNode (_e4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide3E3(this);
    }

    public PE4 GetE4 ()
    {
        return _e4_;
    }

    public void SetE4 (PE4 node)
    {
        if(_e4_ != null)
        {
            _e4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_e4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _e4_ == child )
        {
            _e4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _e4_ == oldChild )
        {
            SetE4 ((PE4) newChild);
            return;
        }
    }

}
public sealed class ASide1E4 : PE4
{
    private PE4 _e4_;
    private TMultiply _multiply_;
    private PE5 _e5_;

    public ASide1E4 ()
    {
    }

    public ASide1E4 (
            PE4 _e4_,
            TMultiply _multiply_,
            PE5 _e5_
    )
    {
        SetE4 (_e4_);
        SetMultiply (_multiply_);
        SetE5 (_e5_);
    }

    public override Object Clone()
    {
        return new ASide1E4 (
            (PE4)CloneNode (_e4_),
            (TMultiply)CloneNode (_multiply_),
            (PE5)CloneNode (_e5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide1E4(this);
    }

    public PE4 GetE4 ()
    {
        return _e4_;
    }

    public void SetE4 (PE4 node)
    {
        if(_e4_ != null)
        {
            _e4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e4_ = node;
    }
    public TMultiply GetMultiply ()
    {
        return _multiply_;
    }

    public void SetMultiply (TMultiply node)
    {
        if(_multiply_ != null)
        {
            _multiply_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multiply_ = node;
    }
    public PE5 GetE5 ()
    {
        return _e5_;
    }

    public void SetE5 (PE5 node)
    {
        if(_e5_ != null)
        {
            _e5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_e4_)
            + ToString (_multiply_)
            + ToString (_e5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _e4_ == child )
        {
            _e4_ = null;
            return;
        }
        if ( _multiply_ == child )
        {
            _multiply_ = null;
            return;
        }
        if ( _e5_ == child )
        {
            _e5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _e4_ == oldChild )
        {
            SetE4 ((PE4) newChild);
            return;
        }
        if ( _multiply_ == oldChild )
        {
            SetMultiply ((TMultiply) newChild);
            return;
        }
        if ( _e5_ == oldChild )
        {
            SetE5 ((PE5) newChild);
            return;
        }
    }

}
public sealed class ASide2E4 : PE4
{
    private PE4 _e4_;
    private TDivide _divide_;
    private PE5 _e5_;

    public ASide2E4 ()
    {
    }

    public ASide2E4 (
            PE4 _e4_,
            TDivide _divide_,
            PE5 _e5_
    )
    {
        SetE4 (_e4_);
        SetDivide (_divide_);
        SetE5 (_e5_);
    }

    public override Object Clone()
    {
        return new ASide2E4 (
            (PE4)CloneNode (_e4_),
            (TDivide)CloneNode (_divide_),
            (PE5)CloneNode (_e5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide2E4(this);
    }

    public PE4 GetE4 ()
    {
        return _e4_;
    }

    public void SetE4 (PE4 node)
    {
        if(_e4_ != null)
        {
            _e4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e4_ = node;
    }
    public TDivide GetDivide ()
    {
        return _divide_;
    }

    public void SetDivide (TDivide node)
    {
        if(_divide_ != null)
        {
            _divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _divide_ = node;
    }
    public PE5 GetE5 ()
    {
        return _e5_;
    }

    public void SetE5 (PE5 node)
    {
        if(_e5_ != null)
        {
            _e5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_e4_)
            + ToString (_divide_)
            + ToString (_e5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _e4_ == child )
        {
            _e4_ = null;
            return;
        }
        if ( _divide_ == child )
        {
            _divide_ = null;
            return;
        }
        if ( _e5_ == child )
        {
            _e5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _e4_ == oldChild )
        {
            SetE4 ((PE4) newChild);
            return;
        }
        if ( _divide_ == oldChild )
        {
            SetDivide ((TDivide) newChild);
            return;
        }
        if ( _e5_ == oldChild )
        {
            SetE5 ((PE5) newChild);
            return;
        }
    }

}
public sealed class ASide3E4 : PE4
{
    private PE5 _e5_;

    public ASide3E4 ()
    {
    }

    public ASide3E4 (
            PE5 _e5_
    )
    {
        SetE5 (_e5_);
    }

    public override Object Clone()
    {
        return new ASide3E4 (
            (PE5)CloneNode (_e5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide3E4(this);
    }

    public PE5 GetE5 ()
    {
        return _e5_;
    }

    public void SetE5 (PE5 node)
    {
        if(_e5_ != null)
        {
            _e5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_e5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _e5_ == child )
        {
            _e5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _e5_ == oldChild )
        {
            SetE5 ((PE5) newChild);
            return;
        }
    }

}
public sealed class ASide1E5 : PE5
{
    private TLeftParenthesis _left_parenthesis_;
    private PE1 _e1_;
    private TRightParenthesis _right_parenthesis_;

    public ASide1E5 ()
    {
    }

    public ASide1E5 (
            TLeftParenthesis _left_parenthesis_,
            PE1 _e1_,
            TRightParenthesis _right_parenthesis_
    )
    {
        SetLeftParenthesis (_left_parenthesis_);
        SetE1 (_e1_);
        SetRightParenthesis (_right_parenthesis_);
    }

    public override Object Clone()
    {
        return new ASide1E5 (
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PE1)CloneNode (_e1_),
            (TRightParenthesis)CloneNode (_right_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide1E5(this);
    }

    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PE1 GetE1 ()
    {
        return _e1_;
    }

    public void SetE1 (PE1 node)
    {
        if(_e1_ != null)
        {
            _e1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e1_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_parenthesis_)
            + ToString (_e1_)
            + ToString (_right_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _e1_ == child )
        {
            _e1_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _e1_ == oldChild )
        {
            SetE1 ((PE1) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
    }

}
public sealed class ASide2E5 : PE5
{
    private TVariable _variable_;

    public ASide2E5 ()
    {
    }

    public ASide2E5 (
            TVariable _variable_
    )
    {
        SetVariable (_variable_);
    }

    public override Object Clone()
    {
        return new ASide2E5 (
            (TVariable)CloneNode (_variable_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide2E5(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
    }

}
public sealed class ASide3E5 : PE5
{
    private TInt _int_;

    public ASide3E5 ()
    {
    }

    public ASide3E5 (
            TInt _int_
    )
    {
        SetInt (_int_);
    }

    public override Object Clone()
    {
        return new ASide3E5 (
            (TInt)CloneNode (_int_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide3E5(this);
    }

    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_int_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
    }

}
public sealed class ASide4E5 : PE5
{
    private TFloat _float_;

    public ASide4E5 ()
    {
    }

    public ASide4E5 (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new ASide4E5 (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide4E5(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class ASide5E5 : PE5
{
    private TVariable _variable_;
    private TLeftBracket _left_bracket_;
    private PE1 _e1_;
    private TRightBracket _right_bracket_;

    public ASide5E5 ()
    {
    }

    public ASide5E5 (
            TVariable _variable_,
            TLeftBracket _left_bracket_,
            PE1 _e1_,
            TRightBracket _right_bracket_
    )
    {
        SetVariable (_variable_);
        SetLeftBracket (_left_bracket_);
        SetE1 (_e1_);
        SetRightBracket (_right_bracket_);
    }

    public override Object Clone()
    {
        return new ASide5E5 (
            (TVariable)CloneNode (_variable_),
            (TLeftBracket)CloneNode (_left_bracket_),
            (PE1)CloneNode (_e1_),
            (TRightBracket)CloneNode (_right_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide5E5(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TLeftBracket GetLeftBracket ()
    {
        return _left_bracket_;
    }

    public void SetLeftBracket (TLeftBracket node)
    {
        if(_left_bracket_ != null)
        {
            _left_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_bracket_ = node;
    }
    public PE1 GetE1 ()
    {
        return _e1_;
    }

    public void SetE1 (PE1 node)
    {
        if(_e1_ != null)
        {
            _e1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e1_ = node;
    }
    public TRightBracket GetRightBracket ()
    {
        return _right_bracket_;
    }

    public void SetRightBracket (TRightBracket node)
    {
        if(_right_bracket_ != null)
        {
            _right_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_left_bracket_)
            + ToString (_e1_)
            + ToString (_right_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _left_bracket_ == child )
        {
            _left_bracket_ = null;
            return;
        }
        if ( _e1_ == child )
        {
            _e1_ = null;
            return;
        }
        if ( _right_bracket_ == child )
        {
            _right_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _left_bracket_ == oldChild )
        {
            SetLeftBracket ((TLeftBracket) newChild);
            return;
        }
        if ( _e1_ == oldChild )
        {
            SetE1 ((PE1) newChild);
            return;
        }
        if ( _right_bracket_ == oldChild )
        {
            SetRightBracket ((TRightBracket) newChild);
            return;
        }
    }

}
public sealed class ASide1Vardecl : PVardecl
{
    private TVariable _one_;
    private TVariable _two_;
    private TSemicolon _semicolon_;

    public ASide1Vardecl ()
    {
    }

    public ASide1Vardecl (
            TVariable _one_,
            TVariable _two_,
            TSemicolon _semicolon_
    )
    {
        SetOne (_one_);
        SetTwo (_two_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ASide1Vardecl (
            (TVariable)CloneNode (_one_),
            (TVariable)CloneNode (_two_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide1Vardecl(this);
    }

    public TVariable GetOne ()
    {
        return _one_;
    }

    public void SetOne (TVariable node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TVariable GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (TVariable node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_two_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((TVariable) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((TVariable) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ASide2Vardecl : PVardecl
{
    private TVariable _one_;
    private TVariable _two_;
    private TEqual _equal_;
    private TInt _int_;
    private TSemicolon _semicolon_;

    public ASide2Vardecl ()
    {
    }

    public ASide2Vardecl (
            TVariable _one_,
            TVariable _two_,
            TEqual _equal_,
            TInt _int_,
            TSemicolon _semicolon_
    )
    {
        SetOne (_one_);
        SetTwo (_two_);
        SetEqual (_equal_);
        SetInt (_int_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ASide2Vardecl (
            (TVariable)CloneNode (_one_),
            (TVariable)CloneNode (_two_),
            (TEqual)CloneNode (_equal_),
            (TInt)CloneNode (_int_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide2Vardecl(this);
    }

    public TVariable GetOne ()
    {
        return _one_;
    }

    public void SetOne (TVariable node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TVariable GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (TVariable node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_two_)
            + ToString (_equal_)
            + ToString (_int_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((TVariable) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((TVariable) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ASide3Vardecl : PVardecl
{
    private TVariable _one_;
    private TVariable _two_;
    private TEqual _equal_;
    private TMinus _minus_;
    private TInt _int_;
    private TSemicolon _semicolon_;

    public ASide3Vardecl ()
    {
    }

    public ASide3Vardecl (
            TVariable _one_,
            TVariable _two_,
            TEqual _equal_,
            TMinus _minus_,
            TInt _int_,
            TSemicolon _semicolon_
    )
    {
        SetOne (_one_);
        SetTwo (_two_);
        SetEqual (_equal_);
        SetMinus (_minus_);
        SetInt (_int_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ASide3Vardecl (
            (TVariable)CloneNode (_one_),
            (TVariable)CloneNode (_two_),
            (TEqual)CloneNode (_equal_),
            (TMinus)CloneNode (_minus_),
            (TInt)CloneNode (_int_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide3Vardecl(this);
    }

    public TVariable GetOne ()
    {
        return _one_;
    }

    public void SetOne (TVariable node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TVariable GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (TVariable node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_two_)
            + ToString (_equal_)
            + ToString (_minus_)
            + ToString (_int_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((TVariable) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((TVariable) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ASide5Vardecl : PVardecl
{
    private TVariable _one_;
    private TVariable _two_;
    private TEqual _equal_;
    private TFloat _float_;
    private TSemicolon _semicolon_;

    public ASide5Vardecl ()
    {
    }

    public ASide5Vardecl (
            TVariable _one_,
            TVariable _two_,
            TEqual _equal_,
            TFloat _float_,
            TSemicolon _semicolon_
    )
    {
        SetOne (_one_);
        SetTwo (_two_);
        SetEqual (_equal_);
        SetFloat (_float_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ASide5Vardecl (
            (TVariable)CloneNode (_one_),
            (TVariable)CloneNode (_two_),
            (TEqual)CloneNode (_equal_),
            (TFloat)CloneNode (_float_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide5Vardecl(this);
    }

    public TVariable GetOne ()
    {
        return _one_;
    }

    public void SetOne (TVariable node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TVariable GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (TVariable node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_two_)
            + ToString (_equal_)
            + ToString (_float_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((TVariable) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((TVariable) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ASide6Vardecl : PVardecl
{
    private TVariable _one_;
    private TVariable _two_;
    private TEqual _equal_;
    private TMinus _minus_;
    private TFloat _float_;
    private TSemicolon _semicolon_;

    public ASide6Vardecl ()
    {
    }

    public ASide6Vardecl (
            TVariable _one_,
            TVariable _two_,
            TEqual _equal_,
            TMinus _minus_,
            TFloat _float_,
            TSemicolon _semicolon_
    )
    {
        SetOne (_one_);
        SetTwo (_two_);
        SetEqual (_equal_);
        SetMinus (_minus_);
        SetFloat (_float_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ASide6Vardecl (
            (TVariable)CloneNode (_one_),
            (TVariable)CloneNode (_two_),
            (TEqual)CloneNode (_equal_),
            (TMinus)CloneNode (_minus_),
            (TFloat)CloneNode (_float_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide6Vardecl(this);
    }

    public TVariable GetOne ()
    {
        return _one_;
    }

    public void SetOne (TVariable node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TVariable GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (TVariable node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_two_)
            + ToString (_equal_)
            + ToString (_minus_)
            + ToString (_float_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((TVariable) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((TVariable) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ASide7Vardecl : PVardecl
{
    private TVariable _one_;
    private TVariable _two_;
    private TEqual _equal_;
    private TString _string_;
    private TSemicolon _semicolon_;

    public ASide7Vardecl ()
    {
    }

    public ASide7Vardecl (
            TVariable _one_,
            TVariable _two_,
            TEqual _equal_,
            TString _string_,
            TSemicolon _semicolon_
    )
    {
        SetOne (_one_);
        SetTwo (_two_);
        SetEqual (_equal_);
        SetString (_string_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ASide7Vardecl (
            (TVariable)CloneNode (_one_),
            (TVariable)CloneNode (_two_),
            (TEqual)CloneNode (_equal_),
            (TString)CloneNode (_string_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide7Vardecl(this);
    }

    public TVariable GetOne ()
    {
        return _one_;
    }

    public void SetOne (TVariable node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TVariable GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (TVariable node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_two_)
            + ToString (_equal_)
            + ToString (_string_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((TVariable) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((TVariable) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ASide1Varassign : PVarassign
{
    private TVariable _variable_;
    private TEqual _equal_;
    private PE1 _e1_;
    private TSemicolon _semicolon_;

    public ASide1Varassign ()
    {
    }

    public ASide1Varassign (
            TVariable _variable_,
            TEqual _equal_,
            PE1 _e1_,
            TSemicolon _semicolon_
    )
    {
        SetVariable (_variable_);
        SetEqual (_equal_);
        SetE1 (_e1_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ASide1Varassign (
            (TVariable)CloneNode (_variable_),
            (TEqual)CloneNode (_equal_),
            (PE1)CloneNode (_e1_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide1Varassign(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PE1 GetE1 ()
    {
        return _e1_;
    }

    public void SetE1 (PE1 node)
    {
        if(_e1_ != null)
        {
            _e1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e1_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_equal_)
            + ToString (_e1_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _e1_ == child )
        {
            _e1_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _e1_ == oldChild )
        {
            SetE1 ((PE1) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class APublicStaticMethodDeclare : PMethodDeclare
{
    private TPublic _public_;
    private TStatic _static_;
    private TVariable _variable_;
    private PFormalParams _formal_params_;
    private TLeftCurlyBrace _left_curly_brace_;
    private PList _list_;
    private TRightCurlyBrace _right_curly_brace_;

    public APublicStaticMethodDeclare ()
    {
    }

    public APublicStaticMethodDeclare (
            TPublic _public_,
            TStatic _static_,
            TVariable _variable_,
            PFormalParams _formal_params_,
            TLeftCurlyBrace _left_curly_brace_,
            PList _list_,
            TRightCurlyBrace _right_curly_brace_
    )
    {
        SetPublic (_public_);
        SetStatic (_static_);
        SetVariable (_variable_);
        SetFormalParams (_formal_params_);
        SetLeftCurlyBrace (_left_curly_brace_);
        SetList (_list_);
        SetRightCurlyBrace (_right_curly_brace_);
    }

    public override Object Clone()
    {
        return new APublicStaticMethodDeclare (
            (TPublic)CloneNode (_public_),
            (TStatic)CloneNode (_static_),
            (TVariable)CloneNode (_variable_),
            (PFormalParams)CloneNode (_formal_params_),
            (TLeftCurlyBrace)CloneNode (_left_curly_brace_),
            (PList)CloneNode (_list_),
            (TRightCurlyBrace)CloneNode (_right_curly_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPublicStaticMethodDeclare(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public PFormalParams GetFormalParams ()
    {
        return _formal_params_;
    }

    public void SetFormalParams (PFormalParams node)
    {
        if(_formal_params_ != null)
        {
            _formal_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_params_ = node;
    }
    public TLeftCurlyBrace GetLeftCurlyBrace ()
    {
        return _left_curly_brace_;
    }

    public void SetLeftCurlyBrace (TLeftCurlyBrace node)
    {
        if(_left_curly_brace_ != null)
        {
            _left_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TRightCurlyBrace GetRightCurlyBrace ()
    {
        return _right_curly_brace_;
    }

    public void SetRightCurlyBrace (TRightCurlyBrace node)
    {
        if(_right_curly_brace_ != null)
        {
            _right_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_static_)
            + ToString (_variable_)
            + ToString (_formal_params_)
            + ToString (_left_curly_brace_)
            + ToString (_list_)
            + ToString (_right_curly_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _formal_params_ == child )
        {
            _formal_params_ = null;
            return;
        }
        if ( _left_curly_brace_ == child )
        {
            _left_curly_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _right_curly_brace_ == child )
        {
            _right_curly_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _formal_params_ == oldChild )
        {
            SetFormalParams ((PFormalParams) newChild);
            return;
        }
        if ( _left_curly_brace_ == oldChild )
        {
            SetLeftCurlyBrace ((TLeftCurlyBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _right_curly_brace_ == oldChild )
        {
            SetRightCurlyBrace ((TRightCurlyBrace) newChild);
            return;
        }
    }

}
public sealed class APrivateStaticMethodDeclare : PMethodDeclare
{
    private TPrivate _private_;
    private TStatic _static_;
    private TVariable _variable_;
    private PFormalParams _formal_params_;
    private TLeftCurlyBrace _left_curly_brace_;
    private PList _list_;
    private TRightCurlyBrace _right_curly_brace_;

    public APrivateStaticMethodDeclare ()
    {
    }

    public APrivateStaticMethodDeclare (
            TPrivate _private_,
            TStatic _static_,
            TVariable _variable_,
            PFormalParams _formal_params_,
            TLeftCurlyBrace _left_curly_brace_,
            PList _list_,
            TRightCurlyBrace _right_curly_brace_
    )
    {
        SetPrivate (_private_);
        SetStatic (_static_);
        SetVariable (_variable_);
        SetFormalParams (_formal_params_);
        SetLeftCurlyBrace (_left_curly_brace_);
        SetList (_list_);
        SetRightCurlyBrace (_right_curly_brace_);
    }

    public override Object Clone()
    {
        return new APrivateStaticMethodDeclare (
            (TPrivate)CloneNode (_private_),
            (TStatic)CloneNode (_static_),
            (TVariable)CloneNode (_variable_),
            (PFormalParams)CloneNode (_formal_params_),
            (TLeftCurlyBrace)CloneNode (_left_curly_brace_),
            (PList)CloneNode (_list_),
            (TRightCurlyBrace)CloneNode (_right_curly_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPrivateStaticMethodDeclare(this);
    }

    public TPrivate GetPrivate ()
    {
        return _private_;
    }

    public void SetPrivate (TPrivate node)
    {
        if(_private_ != null)
        {
            _private_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _private_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public PFormalParams GetFormalParams ()
    {
        return _formal_params_;
    }

    public void SetFormalParams (PFormalParams node)
    {
        if(_formal_params_ != null)
        {
            _formal_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_params_ = node;
    }
    public TLeftCurlyBrace GetLeftCurlyBrace ()
    {
        return _left_curly_brace_;
    }

    public void SetLeftCurlyBrace (TLeftCurlyBrace node)
    {
        if(_left_curly_brace_ != null)
        {
            _left_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TRightCurlyBrace GetRightCurlyBrace ()
    {
        return _right_curly_brace_;
    }

    public void SetRightCurlyBrace (TRightCurlyBrace node)
    {
        if(_right_curly_brace_ != null)
        {
            _right_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_private_)
            + ToString (_static_)
            + ToString (_variable_)
            + ToString (_formal_params_)
            + ToString (_left_curly_brace_)
            + ToString (_list_)
            + ToString (_right_curly_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _private_ == child )
        {
            _private_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _formal_params_ == child )
        {
            _formal_params_ = null;
            return;
        }
        if ( _left_curly_brace_ == child )
        {
            _left_curly_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _right_curly_brace_ == child )
        {
            _right_curly_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _private_ == oldChild )
        {
            SetPrivate ((TPrivate) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _formal_params_ == oldChild )
        {
            SetFormalParams ((PFormalParams) newChild);
            return;
        }
        if ( _left_curly_brace_ == oldChild )
        {
            SetLeftCurlyBrace ((TLeftCurlyBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _right_curly_brace_ == oldChild )
        {
            SetRightCurlyBrace ((TRightCurlyBrace) newChild);
            return;
        }
    }

}
public sealed class APublicMethodDeclare : PMethodDeclare
{
    private TPublic _public_;
    private TVariable _variable_;
    private PFormalParams _formal_params_;
    private TLeftCurlyBrace _left_curly_brace_;
    private PList _list_;
    private TRightCurlyBrace _right_curly_brace_;

    public APublicMethodDeclare ()
    {
    }

    public APublicMethodDeclare (
            TPublic _public_,
            TVariable _variable_,
            PFormalParams _formal_params_,
            TLeftCurlyBrace _left_curly_brace_,
            PList _list_,
            TRightCurlyBrace _right_curly_brace_
    )
    {
        SetPublic (_public_);
        SetVariable (_variable_);
        SetFormalParams (_formal_params_);
        SetLeftCurlyBrace (_left_curly_brace_);
        SetList (_list_);
        SetRightCurlyBrace (_right_curly_brace_);
    }

    public override Object Clone()
    {
        return new APublicMethodDeclare (
            (TPublic)CloneNode (_public_),
            (TVariable)CloneNode (_variable_),
            (PFormalParams)CloneNode (_formal_params_),
            (TLeftCurlyBrace)CloneNode (_left_curly_brace_),
            (PList)CloneNode (_list_),
            (TRightCurlyBrace)CloneNode (_right_curly_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPublicMethodDeclare(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public PFormalParams GetFormalParams ()
    {
        return _formal_params_;
    }

    public void SetFormalParams (PFormalParams node)
    {
        if(_formal_params_ != null)
        {
            _formal_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_params_ = node;
    }
    public TLeftCurlyBrace GetLeftCurlyBrace ()
    {
        return _left_curly_brace_;
    }

    public void SetLeftCurlyBrace (TLeftCurlyBrace node)
    {
        if(_left_curly_brace_ != null)
        {
            _left_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TRightCurlyBrace GetRightCurlyBrace ()
    {
        return _right_curly_brace_;
    }

    public void SetRightCurlyBrace (TRightCurlyBrace node)
    {
        if(_right_curly_brace_ != null)
        {
            _right_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_variable_)
            + ToString (_formal_params_)
            + ToString (_left_curly_brace_)
            + ToString (_list_)
            + ToString (_right_curly_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _formal_params_ == child )
        {
            _formal_params_ = null;
            return;
        }
        if ( _left_curly_brace_ == child )
        {
            _left_curly_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _right_curly_brace_ == child )
        {
            _right_curly_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _formal_params_ == oldChild )
        {
            SetFormalParams ((PFormalParams) newChild);
            return;
        }
        if ( _left_curly_brace_ == oldChild )
        {
            SetLeftCurlyBrace ((TLeftCurlyBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _right_curly_brace_ == oldChild )
        {
            SetRightCurlyBrace ((TRightCurlyBrace) newChild);
            return;
        }
    }

}
public sealed class APrivateMethodDeclare : PMethodDeclare
{
    private TPrivate _private_;
    private TVariable _variable_;
    private PFormalParams _formal_params_;
    private TLeftCurlyBrace _left_curly_brace_;
    private PList _list_;
    private TRightCurlyBrace _right_curly_brace_;

    public APrivateMethodDeclare ()
    {
    }

    public APrivateMethodDeclare (
            TPrivate _private_,
            TVariable _variable_,
            PFormalParams _formal_params_,
            TLeftCurlyBrace _left_curly_brace_,
            PList _list_,
            TRightCurlyBrace _right_curly_brace_
    )
    {
        SetPrivate (_private_);
        SetVariable (_variable_);
        SetFormalParams (_formal_params_);
        SetLeftCurlyBrace (_left_curly_brace_);
        SetList (_list_);
        SetRightCurlyBrace (_right_curly_brace_);
    }

    public override Object Clone()
    {
        return new APrivateMethodDeclare (
            (TPrivate)CloneNode (_private_),
            (TVariable)CloneNode (_variable_),
            (PFormalParams)CloneNode (_formal_params_),
            (TLeftCurlyBrace)CloneNode (_left_curly_brace_),
            (PList)CloneNode (_list_),
            (TRightCurlyBrace)CloneNode (_right_curly_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPrivateMethodDeclare(this);
    }

    public TPrivate GetPrivate ()
    {
        return _private_;
    }

    public void SetPrivate (TPrivate node)
    {
        if(_private_ != null)
        {
            _private_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _private_ = node;
    }
    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public PFormalParams GetFormalParams ()
    {
        return _formal_params_;
    }

    public void SetFormalParams (PFormalParams node)
    {
        if(_formal_params_ != null)
        {
            _formal_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_params_ = node;
    }
    public TLeftCurlyBrace GetLeftCurlyBrace ()
    {
        return _left_curly_brace_;
    }

    public void SetLeftCurlyBrace (TLeftCurlyBrace node)
    {
        if(_left_curly_brace_ != null)
        {
            _left_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TRightCurlyBrace GetRightCurlyBrace ()
    {
        return _right_curly_brace_;
    }

    public void SetRightCurlyBrace (TRightCurlyBrace node)
    {
        if(_right_curly_brace_ != null)
        {
            _right_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_private_)
            + ToString (_variable_)
            + ToString (_formal_params_)
            + ToString (_left_curly_brace_)
            + ToString (_list_)
            + ToString (_right_curly_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _private_ == child )
        {
            _private_ = null;
            return;
        }
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _formal_params_ == child )
        {
            _formal_params_ = null;
            return;
        }
        if ( _left_curly_brace_ == child )
        {
            _left_curly_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _right_curly_brace_ == child )
        {
            _right_curly_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _private_ == oldChild )
        {
            SetPrivate ((TPrivate) newChild);
            return;
        }
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _formal_params_ == oldChild )
        {
            SetFormalParams ((PFormalParams) newChild);
            return;
        }
        if ( _left_curly_brace_ == oldChild )
        {
            SetLeftCurlyBrace ((TLeftCurlyBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _right_curly_brace_ == oldChild )
        {
            SetRightCurlyBrace ((TRightCurlyBrace) newChild);
            return;
        }
    }

}
public sealed class AParamsFormalParams : PFormalParams
{
    private TLeftParenthesis _left_parenthesis_;
    private PContent _content_;
    private TRightParenthesis _right_parenthesis_;

    public AParamsFormalParams ()
    {
    }

    public AParamsFormalParams (
            TLeftParenthesis _left_parenthesis_,
            PContent _content_,
            TRightParenthesis _right_parenthesis_
    )
    {
        SetLeftParenthesis (_left_parenthesis_);
        SetContent (_content_);
        SetRightParenthesis (_right_parenthesis_);
    }

    public override Object Clone()
    {
        return new AParamsFormalParams (
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PContent)CloneNode (_content_),
            (TRightParenthesis)CloneNode (_right_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsFormalParams(this);
    }

    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PContent GetContent ()
    {
        return _content_;
    }

    public void SetContent (PContent node)
    {
        if(_content_ != null)
        {
            _content_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _content_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_parenthesis_)
            + ToString (_content_)
            + ToString (_right_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _content_ == child )
        {
            _content_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _content_ == oldChild )
        {
            SetContent ((PContent) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
    }

}
public sealed class ANoParamsFormalParams : PFormalParams
{
    private TLeftParenthesis _left_parenthesis_;
    private TRightParenthesis _right_parenthesis_;

    public ANoParamsFormalParams ()
    {
    }

    public ANoParamsFormalParams (
            TLeftParenthesis _left_parenthesis_,
            TRightParenthesis _right_parenthesis_
    )
    {
        SetLeftParenthesis (_left_parenthesis_);
        SetRightParenthesis (_right_parenthesis_);
    }

    public override Object Clone()
    {
        return new ANoParamsFormalParams (
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (TRightParenthesis)CloneNode (_right_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoParamsFormalParams(this);
    }

    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_parenthesis_)
            + ToString (_right_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
    }

}
public sealed class ATwoPartsContent : PContent
{
    private PContent _content_;
    private TComma _comma_;
    private TVariable _one_;
    private TVariable _two_;

    public ATwoPartsContent ()
    {
    }

    public ATwoPartsContent (
            PContent _content_,
            TComma _comma_,
            TVariable _one_,
            TVariable _two_
    )
    {
        SetContent (_content_);
        SetComma (_comma_);
        SetOne (_one_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ATwoPartsContent (
            (PContent)CloneNode (_content_),
            (TComma)CloneNode (_comma_),
            (TVariable)CloneNode (_one_),
            (TVariable)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoPartsContent(this);
    }

    public PContent GetContent ()
    {
        return _content_;
    }

    public void SetContent (PContent node)
    {
        if(_content_ != null)
        {
            _content_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _content_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TVariable GetOne ()
    {
        return _one_;
    }

    public void SetOne (TVariable node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TVariable GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (TVariable node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_content_)
            + ToString (_comma_)
            + ToString (_one_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _content_ == child )
        {
            _content_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _content_ == oldChild )
        {
            SetContent ((PContent) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _one_ == oldChild )
        {
            SetOne ((TVariable) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((TVariable) newChild);
            return;
        }
    }

}
public sealed class AOnePartContent : PContent
{
    private TVariable _one_;
    private TVariable _two_;

    public AOnePartContent ()
    {
    }

    public AOnePartContent (
            TVariable _one_,
            TVariable _two_
    )
    {
        SetOne (_one_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new AOnePartContent (
            (TVariable)CloneNode (_one_),
            (TVariable)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOnePartContent(this);
    }

    public TVariable GetOne ()
    {
        return _one_;
    }

    public void SetOne (TVariable node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TVariable GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (TVariable node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((TVariable) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((TVariable) newChild);
            return;
        }
    }

}
public sealed class AMethodCall : PMethodCall
{
    private TVariable _variable_;
    private PActualParams _actual_params_;
    private TSemicolon _semicolon_;

    public AMethodCall ()
    {
    }

    public AMethodCall (
            TVariable _variable_,
            PActualParams _actual_params_,
            TSemicolon _semicolon_
    )
    {
        SetVariable (_variable_);
        SetActualParams (_actual_params_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AMethodCall (
            (TVariable)CloneNode (_variable_),
            (PActualParams)CloneNode (_actual_params_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodCall(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public PActualParams GetActualParams ()
    {
        return _actual_params_;
    }

    public void SetActualParams (PActualParams node)
    {
        if(_actual_params_ != null)
        {
            _actual_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_params_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_actual_params_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _actual_params_ == child )
        {
            _actual_params_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _actual_params_ == oldChild )
        {
            SetActualParams ((PActualParams) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AParamsActualParams : PActualParams
{
    private TLeftParenthesis _left_parenthesis_;
    private PExpression _expression_;
    private TRightParenthesis _right_parenthesis_;

    public AParamsActualParams ()
    {
    }

    public AParamsActualParams (
            TLeftParenthesis _left_parenthesis_,
            PExpression _expression_,
            TRightParenthesis _right_parenthesis_
    )
    {
        SetLeftParenthesis (_left_parenthesis_);
        SetExpression (_expression_);
        SetRightParenthesis (_right_parenthesis_);
    }

    public override Object Clone()
    {
        return new AParamsActualParams (
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TRightParenthesis)CloneNode (_right_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsActualParams(this);
    }

    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_parenthesis_)
            + ToString (_expression_)
            + ToString (_right_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
    }

}
public sealed class ANoParamsActualParams : PActualParams
{
    private TLeftParenthesis _left_parenthesis_;
    private TRightParenthesis _right_parenthesis_;

    public ANoParamsActualParams ()
    {
    }

    public ANoParamsActualParams (
            TLeftParenthesis _left_parenthesis_,
            TRightParenthesis _right_parenthesis_
    )
    {
        SetLeftParenthesis (_left_parenthesis_);
        SetRightParenthesis (_right_parenthesis_);
    }

    public override Object Clone()
    {
        return new ANoParamsActualParams (
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (TRightParenthesis)CloneNode (_right_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoParamsActualParams(this);
    }

    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_parenthesis_)
            + ToString (_right_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
    }

}
public sealed class ATwoPartsStringExpression : PExpression
{
    private PExpression _expression_;
    private TComma _comma_;
    private TString _string_;

    public ATwoPartsStringExpression ()
    {
    }

    public ATwoPartsStringExpression (
            PExpression _expression_,
            TComma _comma_,
            TString _string_
    )
    {
        SetExpression (_expression_);
        SetComma (_comma_);
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new ATwoPartsStringExpression (
            (PExpression)CloneNode (_expression_),
            (TComma)CloneNode (_comma_),
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoPartsStringExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_comma_)
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class ATwoPartsBooleanExpression : PExpression
{
    private PExpression _expression_;
    private TComma _comma_;
    private PE1 _e1_;

    public ATwoPartsBooleanExpression ()
    {
    }

    public ATwoPartsBooleanExpression (
            PExpression _expression_,
            TComma _comma_,
            PE1 _e1_
    )
    {
        SetExpression (_expression_);
        SetComma (_comma_);
        SetE1 (_e1_);
    }

    public override Object Clone()
    {
        return new ATwoPartsBooleanExpression (
            (PExpression)CloneNode (_expression_),
            (TComma)CloneNode (_comma_),
            (PE1)CloneNode (_e1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoPartsBooleanExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PE1 GetE1 ()
    {
        return _e1_;
    }

    public void SetE1 (PE1 node)
    {
        if(_e1_ != null)
        {
            _e1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_comma_)
            + ToString (_e1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _e1_ == child )
        {
            _e1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _e1_ == oldChild )
        {
            SetE1 ((PE1) newChild);
            return;
        }
    }

}
public sealed class ABaseStringExpression : PExpression
{
    private TString _string_;

    public ABaseStringExpression ()
    {
    }

    public ABaseStringExpression (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new ABaseStringExpression (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABaseStringExpression(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class ABaseBooleanExpression : PExpression
{
    private PE1 _e1_;

    public ABaseBooleanExpression ()
    {
    }

    public ABaseBooleanExpression (
            PE1 _e1_
    )
    {
        SetE1 (_e1_);
    }

    public override Object Clone()
    {
        return new ABaseBooleanExpression (
            (PE1)CloneNode (_e1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABaseBooleanExpression(this);
    }

    public PE1 GetE1 ()
    {
        return _e1_;
    }

    public void SetE1 (PE1 node)
    {
        if(_e1_ != null)
        {
            _e1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_e1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _e1_ == child )
        {
            _e1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _e1_ == oldChild )
        {
            SetE1 ((PE1) newChild);
            return;
        }
    }

}
public sealed class ASide1IfStatement : PIfStatement
{
    private TIf _if_;
    private TLeftParenthesis _left_parenthesis_;
    private PE1 _e1_;
    private TRightParenthesis _right_parenthesis_;
    private TLeftCurlyBrace _if_left_curl_;
    private PList _if_list_;
    private TRightCurlyBrace _if_right_curl_;
    private TElse _else_;
    private TLeftCurlyBrace _else_left_curl_;
    private PList _else_list_;
    private TRightCurlyBrace _else_right_curl_;

    public ASide1IfStatement ()
    {
    }

    public ASide1IfStatement (
            TIf _if_,
            TLeftParenthesis _left_parenthesis_,
            PE1 _e1_,
            TRightParenthesis _right_parenthesis_,
            TLeftCurlyBrace _if_left_curl_,
            PList _if_list_,
            TRightCurlyBrace _if_right_curl_,
            TElse _else_,
            TLeftCurlyBrace _else_left_curl_,
            PList _else_list_,
            TRightCurlyBrace _else_right_curl_
    )
    {
        SetIf (_if_);
        SetLeftParenthesis (_left_parenthesis_);
        SetE1 (_e1_);
        SetRightParenthesis (_right_parenthesis_);
        SetIfLeftCurl (_if_left_curl_);
        SetIfList (_if_list_);
        SetIfRightCurl (_if_right_curl_);
        SetElse (_else_);
        SetElseLeftCurl (_else_left_curl_);
        SetElseList (_else_list_);
        SetElseRightCurl (_else_right_curl_);
    }

    public override Object Clone()
    {
        return new ASide1IfStatement (
            (TIf)CloneNode (_if_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PE1)CloneNode (_e1_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TLeftCurlyBrace)CloneNode (_if_left_curl_),
            (PList)CloneNode (_if_list_),
            (TRightCurlyBrace)CloneNode (_if_right_curl_),
            (TElse)CloneNode (_else_),
            (TLeftCurlyBrace)CloneNode (_else_left_curl_),
            (PList)CloneNode (_else_list_),
            (TRightCurlyBrace)CloneNode (_else_right_curl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide1IfStatement(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PE1 GetE1 ()
    {
        return _e1_;
    }

    public void SetE1 (PE1 node)
    {
        if(_e1_ != null)
        {
            _e1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e1_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TLeftCurlyBrace GetIfLeftCurl ()
    {
        return _if_left_curl_;
    }

    public void SetIfLeftCurl (TLeftCurlyBrace node)
    {
        if(_if_left_curl_ != null)
        {
            _if_left_curl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_left_curl_ = node;
    }
    public PList GetIfList ()
    {
        return _if_list_;
    }

    public void SetIfList (PList node)
    {
        if(_if_list_ != null)
        {
            _if_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_list_ = node;
    }
    public TRightCurlyBrace GetIfRightCurl ()
    {
        return _if_right_curl_;
    }

    public void SetIfRightCurl (TRightCurlyBrace node)
    {
        if(_if_right_curl_ != null)
        {
            _if_right_curl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_right_curl_ = node;
    }
    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TLeftCurlyBrace GetElseLeftCurl ()
    {
        return _else_left_curl_;
    }

    public void SetElseLeftCurl (TLeftCurlyBrace node)
    {
        if(_else_left_curl_ != null)
        {
            _else_left_curl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_left_curl_ = node;
    }
    public PList GetElseList ()
    {
        return _else_list_;
    }

    public void SetElseList (PList node)
    {
        if(_else_list_ != null)
        {
            _else_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_list_ = node;
    }
    public TRightCurlyBrace GetElseRightCurl ()
    {
        return _else_right_curl_;
    }

    public void SetElseRightCurl (TRightCurlyBrace node)
    {
        if(_else_right_curl_ != null)
        {
            _else_right_curl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_right_curl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_left_parenthesis_)
            + ToString (_e1_)
            + ToString (_right_parenthesis_)
            + ToString (_if_left_curl_)
            + ToString (_if_list_)
            + ToString (_if_right_curl_)
            + ToString (_else_)
            + ToString (_else_left_curl_)
            + ToString (_else_list_)
            + ToString (_else_right_curl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _e1_ == child )
        {
            _e1_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _if_left_curl_ == child )
        {
            _if_left_curl_ = null;
            return;
        }
        if ( _if_list_ == child )
        {
            _if_list_ = null;
            return;
        }
        if ( _if_right_curl_ == child )
        {
            _if_right_curl_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _else_left_curl_ == child )
        {
            _else_left_curl_ = null;
            return;
        }
        if ( _else_list_ == child )
        {
            _else_list_ = null;
            return;
        }
        if ( _else_right_curl_ == child )
        {
            _else_right_curl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _e1_ == oldChild )
        {
            SetE1 ((PE1) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _if_left_curl_ == oldChild )
        {
            SetIfLeftCurl ((TLeftCurlyBrace) newChild);
            return;
        }
        if ( _if_list_ == oldChild )
        {
            SetIfList ((PList) newChild);
            return;
        }
        if ( _if_right_curl_ == oldChild )
        {
            SetIfRightCurl ((TRightCurlyBrace) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _else_left_curl_ == oldChild )
        {
            SetElseLeftCurl ((TLeftCurlyBrace) newChild);
            return;
        }
        if ( _else_list_ == oldChild )
        {
            SetElseList ((PList) newChild);
            return;
        }
        if ( _else_right_curl_ == oldChild )
        {
            SetElseRightCurl ((TRightCurlyBrace) newChild);
            return;
        }
    }

}
public sealed class ASide2IfStatement : PIfStatement
{
    private TIf _if_;
    private TLeftParenthesis _left_parenthesis_;
    private PE1 _e1_;
    private TRightParenthesis _right_parenthesis_;
    private TLeftCurlyBrace _left_curly_brace_;
    private PList _list_;
    private TRightCurlyBrace _right_curly_brace_;

    public ASide2IfStatement ()
    {
    }

    public ASide2IfStatement (
            TIf _if_,
            TLeftParenthesis _left_parenthesis_,
            PE1 _e1_,
            TRightParenthesis _right_parenthesis_,
            TLeftCurlyBrace _left_curly_brace_,
            PList _list_,
            TRightCurlyBrace _right_curly_brace_
    )
    {
        SetIf (_if_);
        SetLeftParenthesis (_left_parenthesis_);
        SetE1 (_e1_);
        SetRightParenthesis (_right_parenthesis_);
        SetLeftCurlyBrace (_left_curly_brace_);
        SetList (_list_);
        SetRightCurlyBrace (_right_curly_brace_);
    }

    public override Object Clone()
    {
        return new ASide2IfStatement (
            (TIf)CloneNode (_if_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PE1)CloneNode (_e1_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TLeftCurlyBrace)CloneNode (_left_curly_brace_),
            (PList)CloneNode (_list_),
            (TRightCurlyBrace)CloneNode (_right_curly_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide2IfStatement(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PE1 GetE1 ()
    {
        return _e1_;
    }

    public void SetE1 (PE1 node)
    {
        if(_e1_ != null)
        {
            _e1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e1_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TLeftCurlyBrace GetLeftCurlyBrace ()
    {
        return _left_curly_brace_;
    }

    public void SetLeftCurlyBrace (TLeftCurlyBrace node)
    {
        if(_left_curly_brace_ != null)
        {
            _left_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TRightCurlyBrace GetRightCurlyBrace ()
    {
        return _right_curly_brace_;
    }

    public void SetRightCurlyBrace (TRightCurlyBrace node)
    {
        if(_right_curly_brace_ != null)
        {
            _right_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_left_parenthesis_)
            + ToString (_e1_)
            + ToString (_right_parenthesis_)
            + ToString (_left_curly_brace_)
            + ToString (_list_)
            + ToString (_right_curly_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _e1_ == child )
        {
            _e1_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _left_curly_brace_ == child )
        {
            _left_curly_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _right_curly_brace_ == child )
        {
            _right_curly_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _e1_ == oldChild )
        {
            SetE1 ((PE1) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _left_curly_brace_ == oldChild )
        {
            SetLeftCurlyBrace ((TLeftCurlyBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _right_curly_brace_ == oldChild )
        {
            SetRightCurlyBrace ((TRightCurlyBrace) newChild);
            return;
        }
    }

}
public sealed class AWhileStatement : PWhileStatement
{
    private TWhile _while_;
    private TLeftParenthesis _left_parenthesis_;
    private PE1 _e1_;
    private TRightParenthesis _right_parenthesis_;
    private TLeftCurlyBrace _left_curly_brace_;
    private PList _list_;
    private TRightCurlyBrace _right_curly_brace_;

    public AWhileStatement ()
    {
    }

    public AWhileStatement (
            TWhile _while_,
            TLeftParenthesis _left_parenthesis_,
            PE1 _e1_,
            TRightParenthesis _right_parenthesis_,
            TLeftCurlyBrace _left_curly_brace_,
            PList _list_,
            TRightCurlyBrace _right_curly_brace_
    )
    {
        SetWhile (_while_);
        SetLeftParenthesis (_left_parenthesis_);
        SetE1 (_e1_);
        SetRightParenthesis (_right_parenthesis_);
        SetLeftCurlyBrace (_left_curly_brace_);
        SetList (_list_);
        SetRightCurlyBrace (_right_curly_brace_);
    }

    public override Object Clone()
    {
        return new AWhileStatement (
            (TWhile)CloneNode (_while_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PE1)CloneNode (_e1_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TLeftCurlyBrace)CloneNode (_left_curly_brace_),
            (PList)CloneNode (_list_),
            (TRightCurlyBrace)CloneNode (_right_curly_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStatement(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PE1 GetE1 ()
    {
        return _e1_;
    }

    public void SetE1 (PE1 node)
    {
        if(_e1_ != null)
        {
            _e1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e1_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TLeftCurlyBrace GetLeftCurlyBrace ()
    {
        return _left_curly_brace_;
    }

    public void SetLeftCurlyBrace (TLeftCurlyBrace node)
    {
        if(_left_curly_brace_ != null)
        {
            _left_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_brace_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TRightCurlyBrace GetRightCurlyBrace ()
    {
        return _right_curly_brace_;
    }

    public void SetRightCurlyBrace (TRightCurlyBrace node)
    {
        if(_right_curly_brace_ != null)
        {
            _right_curly_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_left_parenthesis_)
            + ToString (_e1_)
            + ToString (_right_parenthesis_)
            + ToString (_left_curly_brace_)
            + ToString (_list_)
            + ToString (_right_curly_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _e1_ == child )
        {
            _e1_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _left_curly_brace_ == child )
        {
            _left_curly_brace_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _right_curly_brace_ == child )
        {
            _right_curly_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _e1_ == oldChild )
        {
            SetE1 ((PE1) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _left_curly_brace_ == oldChild )
        {
            SetLeftCurlyBrace ((TLeftCurlyBrace) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _right_curly_brace_ == oldChild )
        {
            SetRightCurlyBrace ((TRightCurlyBrace) newChild);
            return;
        }
    }

}
public sealed class AArrayCreate : PArrayCreate
{
    private TVariable _type_;
    private TLeftBracket _declare_lb_;
    private TRightBracket _declare_rb_;
    private TVariable _name_of_array_;
    private TEqual _equal_;
    private TVariable _new_;
    private TVariable _same_type_;
    private TLeftBracket _create_lb_;
    private PE1 _e1_;
    private TRightBracket _create_rb_;
    private TSemicolon _semicolon_;

    public AArrayCreate ()
    {
    }

    public AArrayCreate (
            TVariable _type_,
            TLeftBracket _declare_lb_,
            TRightBracket _declare_rb_,
            TVariable _name_of_array_,
            TEqual _equal_,
            TVariable _new_,
            TVariable _same_type_,
            TLeftBracket _create_lb_,
            PE1 _e1_,
            TRightBracket _create_rb_,
            TSemicolon _semicolon_
    )
    {
        SetType (_type_);
        SetDeclareLb (_declare_lb_);
        SetDeclareRb (_declare_rb_);
        SetNameOfArray (_name_of_array_);
        SetEqual (_equal_);
        SetNew (_new_);
        SetSameType (_same_type_);
        SetCreateLb (_create_lb_);
        SetE1 (_e1_);
        SetCreateRb (_create_rb_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AArrayCreate (
            (TVariable)CloneNode (_type_),
            (TLeftBracket)CloneNode (_declare_lb_),
            (TRightBracket)CloneNode (_declare_rb_),
            (TVariable)CloneNode (_name_of_array_),
            (TEqual)CloneNode (_equal_),
            (TVariable)CloneNode (_new_),
            (TVariable)CloneNode (_same_type_),
            (TLeftBracket)CloneNode (_create_lb_),
            (PE1)CloneNode (_e1_),
            (TRightBracket)CloneNode (_create_rb_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayCreate(this);
    }

    public TVariable GetType ()
    {
        return _type_;
    }

    public void SetType (TVariable node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TLeftBracket GetDeclareLb ()
    {
        return _declare_lb_;
    }

    public void SetDeclareLb (TLeftBracket node)
    {
        if(_declare_lb_ != null)
        {
            _declare_lb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_lb_ = node;
    }
    public TRightBracket GetDeclareRb ()
    {
        return _declare_rb_;
    }

    public void SetDeclareRb (TRightBracket node)
    {
        if(_declare_rb_ != null)
        {
            _declare_rb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_rb_ = node;
    }
    public TVariable GetNameOfArray ()
    {
        return _name_of_array_;
    }

    public void SetNameOfArray (TVariable node)
    {
        if(_name_of_array_ != null)
        {
            _name_of_array_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_of_array_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public TVariable GetNew ()
    {
        return _new_;
    }

    public void SetNew (TVariable node)
    {
        if(_new_ != null)
        {
            _new_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _new_ = node;
    }
    public TVariable GetSameType ()
    {
        return _same_type_;
    }

    public void SetSameType (TVariable node)
    {
        if(_same_type_ != null)
        {
            _same_type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _same_type_ = node;
    }
    public TLeftBracket GetCreateLb ()
    {
        return _create_lb_;
    }

    public void SetCreateLb (TLeftBracket node)
    {
        if(_create_lb_ != null)
        {
            _create_lb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _create_lb_ = node;
    }
    public PE1 GetE1 ()
    {
        return _e1_;
    }

    public void SetE1 (PE1 node)
    {
        if(_e1_ != null)
        {
            _e1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _e1_ = node;
    }
    public TRightBracket GetCreateRb ()
    {
        return _create_rb_;
    }

    public void SetCreateRb (TRightBracket node)
    {
        if(_create_rb_ != null)
        {
            _create_rb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _create_rb_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_declare_lb_)
            + ToString (_declare_rb_)
            + ToString (_name_of_array_)
            + ToString (_equal_)
            + ToString (_new_)
            + ToString (_same_type_)
            + ToString (_create_lb_)
            + ToString (_e1_)
            + ToString (_create_rb_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _declare_lb_ == child )
        {
            _declare_lb_ = null;
            return;
        }
        if ( _declare_rb_ == child )
        {
            _declare_rb_ = null;
            return;
        }
        if ( _name_of_array_ == child )
        {
            _name_of_array_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _new_ == child )
        {
            _new_ = null;
            return;
        }
        if ( _same_type_ == child )
        {
            _same_type_ = null;
            return;
        }
        if ( _create_lb_ == child )
        {
            _create_lb_ = null;
            return;
        }
        if ( _e1_ == child )
        {
            _e1_ = null;
            return;
        }
        if ( _create_rb_ == child )
        {
            _create_rb_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TVariable) newChild);
            return;
        }
        if ( _declare_lb_ == oldChild )
        {
            SetDeclareLb ((TLeftBracket) newChild);
            return;
        }
        if ( _declare_rb_ == oldChild )
        {
            SetDeclareRb ((TRightBracket) newChild);
            return;
        }
        if ( _name_of_array_ == oldChild )
        {
            SetNameOfArray ((TVariable) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _new_ == oldChild )
        {
            SetNew ((TVariable) newChild);
            return;
        }
        if ( _same_type_ == oldChild )
        {
            SetSameType ((TVariable) newChild);
            return;
        }
        if ( _create_lb_ == oldChild )
        {
            SetCreateLb ((TLeftBracket) newChild);
            return;
        }
        if ( _e1_ == oldChild )
        {
            SetE1 ((PE1) newChild);
            return;
        }
        if ( _create_rb_ == oldChild )
        {
            SetCreateRb ((TRightBracket) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
